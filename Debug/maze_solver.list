
maze_solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000714  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000784  20000784  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf5b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae4  00000000  00000000  0002cffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a89  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9aa  00000000  00000000  00051d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc980  00000000  00000000  0005f71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c09b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003be0  00000000  00000000  0012c0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003dd0 	.word	0x08003dd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003dd0 	.word	0x08003dd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void __io_putchar(int ch){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch) ;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffd1 	bl	8000574 <ITM_SendChar>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fde3 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f883 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f99f 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f973 	bl	80008d8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005f2:	f000 f93b 	bl	800086c <MX_TIM7_Init>
  MX_TIM2_Init();
 80005f6:	f000 f8e5 	bl	80007c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // setting the cells to zero value
  memset(cells , RESET , sizeof(cells)) ;
 80005fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80005fe:	2100      	movs	r1, #0
 8000600:	4832      	ldr	r0, [pc, #200]	; (80006cc <main+0xf0>)
 8000602:	f002 fc4f 	bl	8002ea4 <memset>

  // find the center location of the cell
  // first find wether it is odd or even
  uint8_t is_odd = 0 ;
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]
  is_odd = ( ( (CELL_IN_ROW * CELL_IN_COLUMN ) % 2 ) == 1 )? MAZE_IS_ODD : MAZE_IS_EVEN;
 800060a:	2301      	movs	r3, #1
 800060c:	71bb      	strb	r3, [r7, #6]

  /* is is_odd value is 1 then it is odd
  number matrix else it is even if it has 0 as it value */

  if (is_odd == 1) {
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10c      	bne.n	800062e <main+0x52>

  center_row_location[0] = (  CELL_IN_ROW / 2 );
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <main+0xf4>)
 8000616:	2207      	movs	r2, #7
 8000618:	801a      	strh	r2, [r3, #0]
  center_row_location[1] = ( (CELL_IN_ROW / 2 ) + 1 );
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <main+0xf4>)
 800061c:	2208      	movs	r2, #8
 800061e:	805a      	strh	r2, [r3, #2]

  center_column_location[0] = ( CELL_IN_COLUMN / 2 );
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <main+0xf8>)
 8000622:	2207      	movs	r2, #7
 8000624:	801a      	strh	r2, [r3, #0]
  center_column_location[1] = ( (CELL_IN_COLUMN / 2 ) + 1 );
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <main+0xf8>)
 8000628:	2208      	movs	r2, #8
 800062a:	805a      	strh	r2, [r3, #2]
 800062c:	e010      	b.n	8000650 <main+0x74>

  }else if (is_odd == 0) {
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d10d      	bne.n	8000650 <main+0x74>

  center_row_location[0] = (  CELL_IN_ROW / 2 );
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <main+0xf4>)
 8000636:	2207      	movs	r2, #7
 8000638:	801a      	strh	r2, [r3, #0]
  center_row_location[1] = -1 ;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <main+0xf4>)
 800063c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000640:	805a      	strh	r2, [r3, #2]

  center_column_location[0] = ( CELL_IN_COLUMN / 2 );
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <main+0xf8>)
 8000644:	2207      	movs	r2, #7
 8000646:	801a      	strh	r2, [r3, #0]
  center_column_location[1] = -1 ;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <main+0xf8>)
 800064a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064e:	805a      	strh	r2, [r3, #2]


  }
  // do a flood fill with no walls at all which means all values are basically static
  floodfill_with_no_walls() ;
 8000650:	f000 faca 	bl	8000be8 <floodfill_with_no_walls>

  HAL_UART_Transmit(&huart2, (uint8_t*)"static flooding complete ", 26, HAL_MAX_DELAY) ;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	221a      	movs	r2, #26
 800065a:	491f      	ldr	r1, [pc, #124]	; (80006d8 <main+0xfc>)
 800065c:	481f      	ldr	r0, [pc, #124]	; (80006dc <main+0x100>)
 800065e:	f002 f882 	bl	8002766 <HAL_UART_Transmit>

  for (uint8_t i = 0; i < 4; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e014      	b.n	8000692 <main+0xb6>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET) ;
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <main+0x104>)
 8000670:	f001 f8b4 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_Delay(150) ;
 8000674:	2096      	movs	r0, #150	; 0x96
 8000676:	f000 fe0b 	bl	8001290 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET) ;
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0x104>)
 8000682:	f001 f8ab 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_Delay(150) ;
 8000686:	2096      	movs	r0, #150	; 0x96
 8000688:	f000 fe02 	bl	8001290 <HAL_Delay>
  for (uint8_t i = 0; i < 4; i++) {
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3301      	adds	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d9e7      	bls.n	8000668 <main+0x8c>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET) ;
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0x104>)
 80006a0:	f001 f89c 	bl	80017dc <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) ;
 80006a4:	213c      	movs	r1, #60	; 0x3c
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <main+0x108>)
 80006a8:	f001 fe3f 	bl	800232a <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	counter = __HAL_TIM_GET_COUNTER(&htim2) ;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <main+0x10c>)
 80006b4:	6013      	str	r3, [r2, #0]
	  printf("%d \n " , counter) ;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <main+0x10c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0x110>)
 80006be:	f002 fbf9 	bl	8002eb4 <iprintf>
	  HAL_Delay(500) ;
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f000 fde3 	bl	8001290 <HAL_Delay>
  {
 80006ca:	e7ef      	b.n	80006ac <main+0xd0>
 80006cc:	20000168 	.word	0x20000168
 80006d0:	20000160 	.word	0x20000160
 80006d4:	20000164 	.word	0x20000164
 80006d8:	08003de8 	.word	0x08003de8
 80006dc:	2000011c 	.word	0x2000011c
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000768 	.word	0x20000768
 80006ec:	08003e04 	.word	0x08003e04

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fbd0 	bl	8002ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076c:	2307      	movs	r3, #7
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f84b 	bl	8001810 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 fb2c 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 faac 	bl	8001d00 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 fb15 	bl	8000ddc <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2224      	movs	r2, #36	; 0x24
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fb66 	bl	8002ea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f6:	f04f 32ff 	mov.w	r2, #4294967295
 80007fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000808:	2303      	movs	r3, #3
 800080a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000818:	230a      	movs	r3, #10
 800081a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000828:	230a      	movs	r3, #10
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000834:	f001 fcd3 	bl	80021de <HAL_TIM_Encoder_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800083e:	f000 facd 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000850:	f001 fec0 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800085a:	f000 fabf 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000008c 	.word	0x2000008c

0800086c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM7_Init+0x64>)
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_TIM7_Init+0x68>)
 800087e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_TIM7_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_TIM7_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_TIM7_Init+0x64>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_TIM7_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM7_Init+0x64>)
 800089c:	f001 fc50 	bl	8002140 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80008a6:	f000 fa99 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM7_Init+0x64>)
 80008b8:	f001 fe8c 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 fa8b 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000d4 	.word	0x200000d4
 80008d4:	40001400 	.word	0x40001400

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f001 fedc 	bl	80026cc <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 fa5f 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000011c 	.word	0x2000011c
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	4ba2      	ldr	r3, [pc, #648]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4aa1      	ldr	r2, [pc, #644]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b9f      	ldr	r3, [pc, #636]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	4b9b      	ldr	r3, [pc, #620]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a9a      	ldr	r2, [pc, #616]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b98      	ldr	r3, [pc, #608]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b94      	ldr	r3, [pc, #592]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a93      	ldr	r2, [pc, #588]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b91      	ldr	r3, [pc, #580]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b8d      	ldr	r3, [pc, #564]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a8c      	ldr	r2, [pc, #560]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b8a      	ldr	r3, [pc, #552]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a85      	ldr	r2, [pc, #532]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b83      	ldr	r3, [pc, #524]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b7f      	ldr	r3, [pc, #508]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a7e      	ldr	r2, [pc, #504]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <MX_GPIO_Init+0x2a4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4879      	ldr	r0, [pc, #484]	; (8000bd4 <MX_GPIO_Init+0x2a8>)
 80009f0:	f000 fef4 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	4877      	ldr	r0, [pc, #476]	; (8000bd8 <MX_GPIO_Init+0x2ac>)
 80009fa:	f000 feef 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fe:	2200      	movs	r2, #0
 8000a00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a04:	4875      	ldr	r0, [pc, #468]	; (8000bdc <MX_GPIO_Init+0x2b0>)
 8000a06:	f000 fee9 	bl	80017dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	486c      	ldr	r0, [pc, #432]	; (8000bd4 <MX_GPIO_Init+0x2a8>)
 8000a22:	f000 fd3f 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4866      	ldr	r0, [pc, #408]	; (8000bd8 <MX_GPIO_Init+0x2ac>)
 8000a3e:	f000 fd31 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a52:	2305      	movs	r3, #5
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	485e      	ldr	r0, [pc, #376]	; (8000bd8 <MX_GPIO_Init+0x2ac>)
 8000a5e:	f000 fd21 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	485a      	ldr	r0, [pc, #360]	; (8000be0 <MX_GPIO_Init+0x2b4>)
 8000a78:	f000 fd14 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8c:	2306      	movs	r3, #6
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4852      	ldr	r0, [pc, #328]	; (8000be0 <MX_GPIO_Init+0x2b4>)
 8000a98:	f000 fd04 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a9c:	23e0      	movs	r3, #224	; 0xe0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aac:	2305      	movs	r3, #5
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	484a      	ldr	r0, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x2b4>)
 8000ab8:	f000 fcf4 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000abc:	2304      	movs	r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4845      	ldr	r0, [pc, #276]	; (8000be4 <MX_GPIO_Init+0x2b8>)
 8000ad0:	f000 fce8 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	483c      	ldr	r0, [pc, #240]	; (8000be4 <MX_GPIO_Init+0x2b8>)
 8000af2:	f000 fcd7 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000afa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4833      	ldr	r0, [pc, #204]	; (8000bdc <MX_GPIO_Init+0x2b0>)
 8000b10:	f000 fcc8 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b26:	2306      	movs	r3, #6
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <MX_GPIO_Init+0x2ac>)
 8000b32:	f000 fcb7 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4825      	ldr	r0, [pc, #148]	; (8000be0 <MX_GPIO_Init+0x2b4>)
 8000b4c:	f000 fcaa 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b62:	230a      	movs	r3, #10
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x2b4>)
 8000b6e:	f000 fc99 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b72:	2320      	movs	r3, #32
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_GPIO_Init+0x2b0>)
 8000b86:	f000 fc8d 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480f      	ldr	r0, [pc, #60]	; (8000be4 <MX_GPIO_Init+0x2b8>)
 8000ba8:	f000 fc7c 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0x2a8>)
 8000bc2:	f000 fc6f 	bl	80014a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	; 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400

08000be8 <floodfill_with_no_walls>:

/* USER CODE BEGIN 4 */

void floodfill_with_no_walls(){
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0

	// the below loop does it to only 2nd  quadrant counted from 0 top left i row wise fashion
	for (uint8_t j = 0; j <=( CELL_IN_COLUMN / 2) ; j++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e029      	b.n	8000c48 <floodfill_with_no_walls+0x60>
	for (uint8_t i = 0; i <=( CELL_IN_ROW / 2 ); i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73bb      	strb	r3, [r7, #14]
 8000bf8:	e020      	b.n	8000c3c <floodfill_with_no_walls+0x54>
		cells[i][j].value = manhatten_distance(i, j, center_row_location[0],center_column_location[0]);
 8000bfa:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <floodfill_with_no_walls+0x19c>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <floodfill_with_no_walls+0x1a0>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	7bf9      	ldrb	r1, [r7, #15]
 8000c08:	7bb8      	ldrb	r0, [r7, #14]
 8000c0a:	f000 f8c1 	bl	8000d90 <manhatten_distance>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	7bb9      	ldrb	r1, [r7, #14]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	b294      	uxth	r4, r2
 8000c18:	485c      	ldr	r0, [pc, #368]	; (8000d8c <floodfill_with_no_walls+0x1a4>)
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	441a      	add	r2, r3
 8000c20:	0053      	lsls	r3, r2, #1
 8000c22:	461a      	mov	r2, r3
 8000c24:	460b      	mov	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	440b      	add	r3, r1
 8000c2a:	015b      	lsls	r3, r3, #5
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4403      	add	r3, r0
 8000c30:	3304      	adds	r3, #4
 8000c32:	4622      	mov	r2, r4
 8000c34:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i <=( CELL_IN_ROW / 2 ); i++) {
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	73bb      	strb	r3, [r7, #14]
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d9db      	bls.n	8000bfa <floodfill_with_no_walls+0x12>
	for (uint8_t j = 0; j <=( CELL_IN_COLUMN / 2) ; j++) {
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3301      	adds	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	d9d2      	bls.n	8000bf4 <floodfill_with_no_walls+0xc>
  }

	// the below loop does it to only 2nd  quadrant counted from 0 top left in row wise fashion
	//	center location for goal is incremented in colum by 1
	// looping from location 8 to 15
	for (uint8_t j = 8; j <=( CELL_IN_COLUMN ); j++) {
 8000c4e:	2308      	movs	r3, #8
 8000c50:	737b      	strb	r3, [r7, #13]
 8000c52:	e02b      	b.n	8000cac <floodfill_with_no_walls+0xc4>
	for (uint8_t i = 0; i <=( CELL_IN_ROW /2 ); i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
 8000c58:	e020      	b.n	8000c9c <floodfill_with_no_walls+0xb4>
		cells[i][j].value = manhatten_distance(i, j, center_row_location[0],center_column_location[1]);
 8000c5a:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <floodfill_with_no_walls+0x19c>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <floodfill_with_no_walls+0x1a0>)
 8000c62:	885b      	ldrh	r3, [r3, #2]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	7b79      	ldrb	r1, [r7, #13]
 8000c68:	7b38      	ldrb	r0, [r7, #12]
 8000c6a:	f000 f891 	bl	8000d90 <manhatten_distance>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	7b39      	ldrb	r1, [r7, #12]
 8000c74:	7b7b      	ldrb	r3, [r7, #13]
 8000c76:	b294      	uxth	r4, r2
 8000c78:	4844      	ldr	r0, [pc, #272]	; (8000d8c <floodfill_with_no_walls+0x1a4>)
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	441a      	add	r2, r3
 8000c80:	0053      	lsls	r3, r2, #1
 8000c82:	461a      	mov	r2, r3
 8000c84:	460b      	mov	r3, r1
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	440b      	add	r3, r1
 8000c8a:	015b      	lsls	r3, r3, #5
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4403      	add	r3, r0
 8000c90:	3304      	adds	r3, #4
 8000c92:	4622      	mov	r2, r4
 8000c94:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i <=( CELL_IN_ROW /2 ); i++) {
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	733b      	strb	r3, [r7, #12]
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d9db      	bls.n	8000c5a <floodfill_with_no_walls+0x72>
	}

		#if DEBUG
		uint8_t temp1 = 0  ;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	717b      	strb	r3, [r7, #5]
	for (uint8_t j = 8; j <=( CELL_IN_COLUMN ); j++) {
 8000ca6:	7b7b      	ldrb	r3, [r7, #13]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	737b      	strb	r3, [r7, #13]
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d9d0      	bls.n	8000c54 <floodfill_with_no_walls+0x6c>
  }

	// the below loop does it to only 3rd  quadrant  counted from 0 top left in row wise fashion
	//	center location for goal is incremented in colum by 1
	// looping from location 8 to 15
	for (uint8_t j = 0; j <=( CELL_IN_COLUMN/ 2); j++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	72fb      	strb	r3, [r7, #11]
 8000cb6:	e02b      	b.n	8000d10 <floodfill_with_no_walls+0x128>
	for (uint8_t i = 8; i <=( CELL_IN_ROW  ); i++) {
 8000cb8:	2308      	movs	r3, #8
 8000cba:	72bb      	strb	r3, [r7, #10]
 8000cbc:	e020      	b.n	8000d00 <floodfill_with_no_walls+0x118>
		cells[i][j].value = manhatten_distance(i, j, center_row_location[1],center_column_location[0]);
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <floodfill_with_no_walls+0x19c>)
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <floodfill_with_no_walls+0x1a0>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	7af9      	ldrb	r1, [r7, #11]
 8000ccc:	7ab8      	ldrb	r0, [r7, #10]
 8000cce:	f000 f85f 	bl	8000d90 <manhatten_distance>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	7ab9      	ldrb	r1, [r7, #10]
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	b294      	uxth	r4, r2
 8000cdc:	482b      	ldr	r0, [pc, #172]	; (8000d8c <floodfill_with_no_walls+0x1a4>)
 8000cde:	461a      	mov	r2, r3
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	441a      	add	r2, r3
 8000ce4:	0053      	lsls	r3, r2, #1
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	440b      	add	r3, r1
 8000cee:	015b      	lsls	r3, r3, #5
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4403      	add	r3, r0
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 8; i <=( CELL_IN_ROW  ); i++) {
 8000cfa:	7abb      	ldrb	r3, [r7, #10]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	72bb      	strb	r3, [r7, #10]
 8000d00:	7abb      	ldrb	r3, [r7, #10]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d9db      	bls.n	8000cbe <floodfill_with_no_walls+0xd6>
	}
		#if DEBUG
		uint8_t temp2 = 0  ;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71bb      	strb	r3, [r7, #6]
	for (uint8_t j = 0; j <=( CELL_IN_COLUMN/ 2); j++) {
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	72fb      	strb	r3, [r7, #11]
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d9d0      	bls.n	8000cb8 <floodfill_with_no_walls+0xd0>
  }

	// the below loop does it to only 4th quadrant counted from 0 top left in row wise fashion
		//	center location for goal is incremented in colum by 1
		// looping from location 8 to 15
		for (uint8_t j = 8; j <=( CELL_IN_COLUMN); j++) {
 8000d16:	2308      	movs	r3, #8
 8000d18:	727b      	strb	r3, [r7, #9]
 8000d1a:	e02b      	b.n	8000d74 <floodfill_with_no_walls+0x18c>
		for (uint8_t i = 8; i <=( CELL_IN_ROW  ); i++) {
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	723b      	strb	r3, [r7, #8]
 8000d20:	e020      	b.n	8000d64 <floodfill_with_no_walls+0x17c>
			cells[i][j].value = manhatten_distance(i, j, center_row_location[1],center_column_location[1]);
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <floodfill_with_no_walls+0x19c>)
 8000d24:	885b      	ldrh	r3, [r3, #2]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <floodfill_with_no_walls+0x1a0>)
 8000d2a:	885b      	ldrh	r3, [r3, #2]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	7a79      	ldrb	r1, [r7, #9]
 8000d30:	7a38      	ldrb	r0, [r7, #8]
 8000d32:	f000 f82d 	bl	8000d90 <manhatten_distance>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	7a39      	ldrb	r1, [r7, #8]
 8000d3c:	7a7b      	ldrb	r3, [r7, #9]
 8000d3e:	b294      	uxth	r4, r2
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <floodfill_with_no_walls+0x1a4>)
 8000d42:	461a      	mov	r2, r3
 8000d44:	0052      	lsls	r2, r2, #1
 8000d46:	441a      	add	r2, r3
 8000d48:	0053      	lsls	r3, r2, #1
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	440b      	add	r3, r1
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	4413      	add	r3, r2
 8000d56:	4403      	add	r3, r0
 8000d58:	3304      	adds	r3, #4
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 8; i <=( CELL_IN_ROW  ); i++) {
 8000d5e:	7a3b      	ldrb	r3, [r7, #8]
 8000d60:	3301      	adds	r3, #1
 8000d62:	723b      	strb	r3, [r7, #8]
 8000d64:	7a3b      	ldrb	r3, [r7, #8]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d9db      	bls.n	8000d22 <floodfill_with_no_walls+0x13a>
		}
		#if DEBUG
		uint8_t temp3 = 0  ;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 8; j <=( CELL_IN_COLUMN); j++) {
 8000d6e:	7a7b      	ldrb	r3, [r7, #9]
 8000d70:	3301      	adds	r3, #1
 8000d72:	727b      	strb	r3, [r7, #9]
 8000d74:	7a7b      	ldrb	r3, [r7, #9]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d9d0      	bls.n	8000d1c <floodfill_with_no_walls+0x134>
		#endif
	  }

}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	20000160 	.word	0x20000160
 8000d88:	20000164 	.word	0x20000164
 8000d8c:	20000168 	.word	0x20000168

08000d90 <manhatten_distance>:

uint8_t manhatten_distance (uint8_t c_in_row , uint8_t c_in_col , uint8_t goal_row , uint8_t goal_col){
 8000d90:	b490      	push	{r4, r7}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	4603      	mov	r3, r0
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	460b      	mov	r3, r1
 8000da8:	717b      	strb	r3, [r7, #5]
 8000daa:	4613      	mov	r3, r2
 8000dac:	713b      	strb	r3, [r7, #4]

	// only till 7,7

	return (

			abs ( abs(goal_row - c_in_row) + abs(goal_col - c_in_col) )
 8000dae:	797a      	ldrb	r2, [r7, #5]
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000db8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dbc:	7939      	ldrb	r1, [r7, #4]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bfb8      	it	lt
 8000dc6:	425b      	neglt	r3, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bfb8      	it	lt
 8000dce:	425b      	neglt	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
	);



}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc90      	pop	{r4, r7}
 8000dda:	4770      	bx	lr

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e26:	2007      	movs	r0, #7
 8000e28:	f000 fb08 	bl	800143c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e58:	d12c      	bne.n	8000eb4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x84>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000e92:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <HAL_TIM_Encoder_MspInit+0x88>)
 8000eb0:	f000 faf8 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10d      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x40>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_TIM_Base_MspInit+0x40>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_TIM_Base_MspInit+0x40>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40001400 	.word	0x40001400
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f62:	230c      	movs	r3, #12
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f7e:	f000 fa91 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f934 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fabe 	bl	80005c2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
  }
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f001 feaa 	bl	8002e50 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020000 	.word	0x20020000
 8001128:	00000400 	.word	0x00000400
 800112c:	2000076c 	.word	0x2000076c
 8001130:	20000788 	.word	0x20000788

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001182:	f7ff ffd7 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f001 fe69 	bl	8002e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fa27 	bl	80005dc <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800119c:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 80011a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011a4:	20000784 	.word	0x20000784

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f931 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe02 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f911 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	20000770 	.word	0x20000770

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000770 	.word	0x20000770

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_SetPriority>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff47 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5c 	bl	8001320 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e16b      	b.n	8001798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 815a 	bne.w	8001792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80b4 	beq.w	8001792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a5f      	ldr	r2, [pc, #380]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_GPIO_Init+0x310>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_GPIO_Init+0x314>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x318>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x31c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x320>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_GPIO_Init+0x328>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_GPIO_Init+0x32c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4b      	ldr	r2, [pc, #300]	; (80017d4 <HAL_GPIO_Init+0x330>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x310>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_Init+0x334>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae90 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e267      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d075      	beq.n	800191a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05b      	beq.n	8001918 <HAL_RCC_OscConfig+0x108>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d157      	bne.n	8001918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e242      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x74>
 8001876:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6f      	ldr	r2, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6c      	ldr	r2, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a68      	ldr	r2, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fcd6 	bl	8001278 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fcd2 	bl	8001278 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e207      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fcc2 	bl	8001278 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fcbe 	bl	8001278 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1f3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe8>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1c7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x244>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff fc77 	bl	8001278 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fc73 	bl	8001278 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1a8      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4925      	ldr	r1, [pc, #148]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x244>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc56 	bl	8001278 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc52 	bl	8001278 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e187      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff fc36 	bl	8001278 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc32 	bl	8001278 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e167      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x200>
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fc1f 	bl	8001278 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc1b 	bl	8001278 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e150      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470000 	.word	0x42470000
 8001a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b88      	ldr	r3, [pc, #544]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8097 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a7c      	ldr	r2, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a73      	ldr	r2, [pc, #460]	; (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fbdb 	bl	8001278 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff fbd7 	bl	8001278 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e10c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ea>
 8001aec:	4b64      	ldr	r3, [pc, #400]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a63      	ldr	r2, [pc, #396]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x30c>
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001b1c:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fb9c 	bl	8001278 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff fb98 	bl	8001278 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0cb      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x334>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fb86 	bl	8001278 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff fb82 	bl	8001278 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0b5      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a1 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d05c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d141      	bne.n	8001c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb56 	bl	8001278 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fb52 	bl	8001278 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e087      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	491b      	ldr	r1, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb2b 	bl	8001278 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb27 	bl	8001278 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e05c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x416>
 8001c44:	e054      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb14 	bl	8001278 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb10 	bl	8001278 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e045      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x444>
 8001c72:	e03d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e038      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x4ec>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d028      	beq.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d121      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cc      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d90c      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d044      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e067      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4934      	ldr	r1, [pc, #208]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa42 	bl	8001278 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fa3e 	bl	8001278 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d20c      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9a2 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08003e0c 	.word	0x08003e0c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed0:	b094      	sub	sp, #80	; 0x50
 8001ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	2300      	movs	r3, #0
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee4:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f200 80e1 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efe:	e0db      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f04:	e0db      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0a:	e0d8      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f3e:	4622      	mov	r2, r4
 8001f40:	462b      	mov	r3, r5
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4621      	mov	r1, r4
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f70:	4659      	mov	r1, fp
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4651      	mov	r1, sl
 8001f80:	ebb2 0801 	subs.w	r8, r2, r1
 8001f84:	4659      	mov	r1, fp
 8001f86:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	462b      	mov	r3, r5
 8001fac:	eb49 0303 	adc.w	r3, r9, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	024b      	lsls	r3, r1, #9
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc8:	4621      	mov	r1, r4
 8001fca:	024a      	lsls	r2, r1, #9
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fdc:	f7fe f948 	bl	8000270 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe8:	e058      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002016:	0150      	lsls	r0, r2, #5
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4641      	mov	r1, r8
 800201e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	eb63 0b01 	sbc.w	fp, r3, r1
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800203c:	ebb2 040a 	subs.w	r4, r2, sl
 8002040:	eb63 050b 	sbc.w	r5, r3, fp
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	464b      	mov	r3, r9
 8002060:	eb45 0303 	adc.w	r3, r5, r3
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002072:	4629      	mov	r1, r5
 8002074:	028b      	lsls	r3, r1, #10
 8002076:	4621      	mov	r1, r4
 8002078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800207c:	4621      	mov	r1, r4
 800207e:	028a      	lsls	r2, r1, #10
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002086:	2200      	movs	r2, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	61fa      	str	r2, [r7, #28]
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	f7fe f8ee 	bl	8000270 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3750      	adds	r7, #80	; 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	08003e1c 	.word	0x08003e1c

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08003e1c 	.word	0x08003e1c

08002140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e041      	b.n	80021d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe feac 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 f962 	bl	8002448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e097      	b.n	8002322 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fe16 	bl	8000e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 f908 	bl	8002448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4313      	orrs	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800227e:	f023 030c 	bic.w	r3, r3, #12
 8002282:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	4313      	orrs	r3, r2
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	011a      	lsls	r2, r3, #4
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	031b      	lsls	r3, r3, #12
 80022ae:	4313      	orrs	r3, r2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80022c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4313      	orrs	r3, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002342:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800234a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002352:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d110      	bne.n	800237c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002360:	7b7b      	ldrb	r3, [r7, #13]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e069      	b.n	800243e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237a:	e031      	b.n	80023e0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d110      	bne.n	80023a4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002382:	7bbb      	ldrb	r3, [r7, #14]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002388:	7b3b      	ldrb	r3, [r7, #12]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e055      	b.n	800243e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a2:	e01d      	b.n	80023e0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d108      	bne.n	80023bc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80023aa:	7bbb      	ldrb	r3, [r7, #14]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023b0:	7b7b      	ldrb	r3, [r7, #13]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80023b6:	7b3b      	ldrb	r3, [r7, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d001      	beq.n	80023c0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e03e      	b.n	800243e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_Encoder_Start+0xc4>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d008      	beq.n	80023fe <HAL_TIM_Encoder_Start+0xd4>
 80023ec:	e00f      	b.n	800240e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f8c6 	bl	8002588 <TIM_CCxChannelCmd>
      break;
 80023fc:	e016      	b.n	800242c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	2104      	movs	r1, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f8be 	bl	8002588 <TIM_CCxChannelCmd>
      break;
 800240c:	e00e      	b.n	800242c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f8b6 	bl	8002588 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	2104      	movs	r1, #4
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f8af 	bl	8002588 <TIM_CCxChannelCmd>
      break;
 800242a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a40      	ldr	r2, [pc, #256]	; (800255c <TIM_Base_SetConfig+0x114>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d00f      	beq.n	8002488 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3d      	ldr	r2, [pc, #244]	; (8002560 <TIM_Base_SetConfig+0x118>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00b      	beq.n	8002488 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <TIM_Base_SetConfig+0x11c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <TIM_Base_SetConfig+0x120>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <TIM_Base_SetConfig+0x124>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d108      	bne.n	800249a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2f      	ldr	r2, [pc, #188]	; (800255c <TIM_Base_SetConfig+0x114>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a8:	d027      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <TIM_Base_SetConfig+0x118>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d023      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <TIM_Base_SetConfig+0x11c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01f      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <TIM_Base_SetConfig+0x120>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01b      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <TIM_Base_SetConfig+0x124>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d017      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <TIM_Base_SetConfig+0x128>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <TIM_Base_SetConfig+0x12c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <TIM_Base_SetConfig+0x130>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a25      	ldr	r2, [pc, #148]	; (800257c <TIM_Base_SetConfig+0x134>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a24      	ldr	r2, [pc, #144]	; (8002580 <TIM_Base_SetConfig+0x138>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a23      	ldr	r2, [pc, #140]	; (8002584 <TIM_Base_SetConfig+0x13c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <TIM_Base_SetConfig+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_Base_SetConfig+0xf8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0c      	ldr	r2, [pc, #48]	; (800256c <TIM_Base_SetConfig+0x124>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40010400 	.word	0x40010400
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400
 8002578:	40014800 	.word	0x40014800
 800257c:	40001800 	.word	0x40001800
 8002580:	40001c00 	.word	0x40001c00
 8002584:	40002000 	.word	0x40002000

08002588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e05a      	b.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d01d      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d018      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00e      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10c      	bne.n	8002690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800267c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4313      	orrs	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	40010400 	.word	0x40010400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40001800 	.word	0x40001800

080026cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03f      	b.n	800275e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fc08 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f929 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b08a      	sub	sp, #40	; 0x28
 800276a:	af02      	add	r7, sp, #8
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	d17c      	bne.n	8002880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_UART_Transmit+0x2c>
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e075      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x3e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x11c>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ba:	f7fe fd5d 	bl	8001278 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d4:	d108      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e003      	b.n	80027f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027f8:	e02a      	b.n	8002850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f840 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e036      	b.n	8002882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3302      	adds	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	e007      	b.n	8002842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1cf      	bne.n	80027fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f810 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b090      	sub	sp, #64	; 0x40
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	e050      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d04c      	beq.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
 80028aa:	f7fe fce5 	bl	8001278 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d241      	bcs.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	637a      	str	r2, [r7, #52]	; 0x34
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e5      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	623a      	str	r2, [r7, #32]
 8002910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	69f9      	ldr	r1, [r7, #28]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	61bb      	str	r3, [r7, #24]
   return(result);
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e00f      	b.n	800295e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d09f      	beq.n	800289c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3740      	adds	r7, #64	; 0x40
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	; 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fb86 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff fb6d 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aac:	f7fd fbe0 	bl	8000270 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b42:	f7fd fb95 	bl	8000270 <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	; 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	; 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bfe:	f7fd fb37 	bl	8000270 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e105      	b.n	8002e3e <UART_SetConfig+0x4d6>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cc0:	f7fd fad6 	bl	8000270 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d5e:	f7fd fa87 	bl	8000270 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d86:	441c      	add	r4, r3
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d90:	677a      	str	r2, [r7, #116]	; 0x74
 8002d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1851      	adds	r1, r2, r1
 8002daa:	6039      	str	r1, [r7, #0]
 8002dac:	4649      	mov	r1, r9
 8002dae:	414b      	adcs	r3, r1
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	00cb      	lsls	r3, r1, #3
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc8:	4651      	mov	r1, sl
 8002dca:	00ca      	lsls	r2, r1, #3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	663b      	str	r3, [r7, #96]	; 0x60
 8002dec:	667a      	str	r2, [r7, #100]	; 0x64
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	4641      	mov	r1, r8
 8002e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e04:	4641      	mov	r1, r8
 8002e06:	008a      	lsls	r2, r1, #2
 8002e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e0c:	f7fd fa30 	bl	8000270 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2164      	movs	r1, #100	; 0x64
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4422      	add	r2, r4
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <__errno>:
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <__errno+0x8>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <__libc_init_array>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	4d0d      	ldr	r5, [pc, #52]	; (8002e94 <__libc_init_array+0x38>)
 8002e60:	4c0d      	ldr	r4, [pc, #52]	; (8002e98 <__libc_init_array+0x3c>)
 8002e62:	1b64      	subs	r4, r4, r5
 8002e64:	10a4      	asrs	r4, r4, #2
 8002e66:	2600      	movs	r6, #0
 8002e68:	42a6      	cmp	r6, r4
 8002e6a:	d109      	bne.n	8002e80 <__libc_init_array+0x24>
 8002e6c:	4d0b      	ldr	r5, [pc, #44]	; (8002e9c <__libc_init_array+0x40>)
 8002e6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ea0 <__libc_init_array+0x44>)
 8002e70:	f000 ffae 	bl	8003dd0 <_init>
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	2600      	movs	r6, #0
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d105      	bne.n	8002e8a <__libc_init_array+0x2e>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e84:	4798      	blx	r3
 8002e86:	3601      	adds	r6, #1
 8002e88:	e7ee      	b.n	8002e68 <__libc_init_array+0xc>
 8002e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8e:	4798      	blx	r3
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7f2      	b.n	8002e7a <__libc_init_array+0x1e>
 8002e94:	08003ec4 	.word	0x08003ec4
 8002e98:	08003ec4 	.word	0x08003ec4
 8002e9c:	08003ec4 	.word	0x08003ec4
 8002ea0:	08003ec8 	.word	0x08003ec8

08002ea4 <memset>:
 8002ea4:	4402      	add	r2, r0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <memset+0xa>
 8002eac:	4770      	bx	lr
 8002eae:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb2:	e7f9      	b.n	8002ea8 <memset+0x4>

08002eb4 <iprintf>:
 8002eb4:	b40f      	push	{r0, r1, r2, r3}
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <iprintf+0x2c>)
 8002eb8:	b513      	push	{r0, r1, r4, lr}
 8002eba:	681c      	ldr	r4, [r3, #0]
 8002ebc:	b124      	cbz	r4, 8002ec8 <iprintf+0x14>
 8002ebe:	69a3      	ldr	r3, [r4, #24]
 8002ec0:	b913      	cbnz	r3, 8002ec8 <iprintf+0x14>
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f000 f866 	bl	8002f94 <__sinit>
 8002ec8:	ab05      	add	r3, sp, #20
 8002eca:	9a04      	ldr	r2, [sp, #16]
 8002ecc:	68a1      	ldr	r1, [r4, #8]
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f000 f9bd 	bl	8003250 <_vfiprintf_r>
 8002ed6:	b002      	add	sp, #8
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
 8002ee0:	2000000c 	.word	0x2000000c

08002ee4 <std>:
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	4604      	mov	r4, r0
 8002eea:	e9c0 3300 	strd	r3, r3, [r0]
 8002eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ef2:	6083      	str	r3, [r0, #8]
 8002ef4:	8181      	strh	r1, [r0, #12]
 8002ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ef8:	81c2      	strh	r2, [r0, #14]
 8002efa:	6183      	str	r3, [r0, #24]
 8002efc:	4619      	mov	r1, r3
 8002efe:	2208      	movs	r2, #8
 8002f00:	305c      	adds	r0, #92	; 0x5c
 8002f02:	f7ff ffcf 	bl	8002ea4 <memset>
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <std+0x38>)
 8002f08:	6263      	str	r3, [r4, #36]	; 0x24
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <std+0x3c>)
 8002f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <std+0x40>)
 8002f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <std+0x44>)
 8002f14:	6224      	str	r4, [r4, #32]
 8002f16:	6323      	str	r3, [r4, #48]	; 0x30
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	bf00      	nop
 8002f1c:	080037f9 	.word	0x080037f9
 8002f20:	0800381b 	.word	0x0800381b
 8002f24:	08003853 	.word	0x08003853
 8002f28:	08003877 	.word	0x08003877

08002f2c <_cleanup_r>:
 8002f2c:	4901      	ldr	r1, [pc, #4]	; (8002f34 <_cleanup_r+0x8>)
 8002f2e:	f000 b8af 	b.w	8003090 <_fwalk_reent>
 8002f32:	bf00      	nop
 8002f34:	08003b51 	.word	0x08003b51

08002f38 <__sfmoreglue>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2268      	movs	r2, #104	; 0x68
 8002f3c:	1e4d      	subs	r5, r1, #1
 8002f3e:	4355      	muls	r5, r2
 8002f40:	460e      	mov	r6, r1
 8002f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f46:	f000 f8e5 	bl	8003114 <_malloc_r>
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	b140      	cbz	r0, 8002f60 <__sfmoreglue+0x28>
 8002f4e:	2100      	movs	r1, #0
 8002f50:	e9c0 1600 	strd	r1, r6, [r0]
 8002f54:	300c      	adds	r0, #12
 8002f56:	60a0      	str	r0, [r4, #8]
 8002f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f5c:	f7ff ffa2 	bl	8002ea4 <memset>
 8002f60:	4620      	mov	r0, r4
 8002f62:	bd70      	pop	{r4, r5, r6, pc}

08002f64 <__sfp_lock_acquire>:
 8002f64:	4801      	ldr	r0, [pc, #4]	; (8002f6c <__sfp_lock_acquire+0x8>)
 8002f66:	f000 b8b3 	b.w	80030d0 <__retarget_lock_acquire_recursive>
 8002f6a:	bf00      	nop
 8002f6c:	20000775 	.word	0x20000775

08002f70 <__sfp_lock_release>:
 8002f70:	4801      	ldr	r0, [pc, #4]	; (8002f78 <__sfp_lock_release+0x8>)
 8002f72:	f000 b8ae 	b.w	80030d2 <__retarget_lock_release_recursive>
 8002f76:	bf00      	nop
 8002f78:	20000775 	.word	0x20000775

08002f7c <__sinit_lock_acquire>:
 8002f7c:	4801      	ldr	r0, [pc, #4]	; (8002f84 <__sinit_lock_acquire+0x8>)
 8002f7e:	f000 b8a7 	b.w	80030d0 <__retarget_lock_acquire_recursive>
 8002f82:	bf00      	nop
 8002f84:	20000776 	.word	0x20000776

08002f88 <__sinit_lock_release>:
 8002f88:	4801      	ldr	r0, [pc, #4]	; (8002f90 <__sinit_lock_release+0x8>)
 8002f8a:	f000 b8a2 	b.w	80030d2 <__retarget_lock_release_recursive>
 8002f8e:	bf00      	nop
 8002f90:	20000776 	.word	0x20000776

08002f94 <__sinit>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4604      	mov	r4, r0
 8002f98:	f7ff fff0 	bl	8002f7c <__sinit_lock_acquire>
 8002f9c:	69a3      	ldr	r3, [r4, #24]
 8002f9e:	b11b      	cbz	r3, 8002fa8 <__sinit+0x14>
 8002fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa4:	f7ff bff0 	b.w	8002f88 <__sinit_lock_release>
 8002fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fac:	6523      	str	r3, [r4, #80]	; 0x50
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <__sinit+0x68>)
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <__sinit+0x6c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fb6:	42a3      	cmp	r3, r4
 8002fb8:	bf04      	itt	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	61a3      	streq	r3, [r4, #24]
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 f820 	bl	8003004 <__sfp>
 8002fc4:	6060      	str	r0, [r4, #4]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f81c 	bl	8003004 <__sfp>
 8002fcc:	60a0      	str	r0, [r4, #8]
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 f818 	bl	8003004 <__sfp>
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60e0      	str	r0, [r4, #12]
 8002fd8:	2104      	movs	r1, #4
 8002fda:	6860      	ldr	r0, [r4, #4]
 8002fdc:	f7ff ff82 	bl	8002ee4 <std>
 8002fe0:	68a0      	ldr	r0, [r4, #8]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2109      	movs	r1, #9
 8002fe6:	f7ff ff7d 	bl	8002ee4 <std>
 8002fea:	68e0      	ldr	r0, [r4, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	2112      	movs	r1, #18
 8002ff0:	f7ff ff78 	bl	8002ee4 <std>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61a3      	str	r3, [r4, #24]
 8002ff8:	e7d2      	b.n	8002fa0 <__sinit+0xc>
 8002ffa:	bf00      	nop
 8002ffc:	08003e24 	.word	0x08003e24
 8003000:	08002f2d 	.word	0x08002f2d

08003004 <__sfp>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	4607      	mov	r7, r0
 8003008:	f7ff ffac 	bl	8002f64 <__sfp_lock_acquire>
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <__sfp+0x84>)
 800300e:	681e      	ldr	r6, [r3, #0]
 8003010:	69b3      	ldr	r3, [r6, #24]
 8003012:	b913      	cbnz	r3, 800301a <__sfp+0x16>
 8003014:	4630      	mov	r0, r6
 8003016:	f7ff ffbd 	bl	8002f94 <__sinit>
 800301a:	3648      	adds	r6, #72	; 0x48
 800301c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003020:	3b01      	subs	r3, #1
 8003022:	d503      	bpl.n	800302c <__sfp+0x28>
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	b30b      	cbz	r3, 800306c <__sfp+0x68>
 8003028:	6836      	ldr	r6, [r6, #0]
 800302a:	e7f7      	b.n	800301c <__sfp+0x18>
 800302c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003030:	b9d5      	cbnz	r5, 8003068 <__sfp+0x64>
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <__sfp+0x88>)
 8003034:	60e3      	str	r3, [r4, #12]
 8003036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800303a:	6665      	str	r5, [r4, #100]	; 0x64
 800303c:	f000 f847 	bl	80030ce <__retarget_lock_init_recursive>
 8003040:	f7ff ff96 	bl	8002f70 <__sfp_lock_release>
 8003044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800304c:	6025      	str	r5, [r4, #0]
 800304e:	61a5      	str	r5, [r4, #24]
 8003050:	2208      	movs	r2, #8
 8003052:	4629      	mov	r1, r5
 8003054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003058:	f7ff ff24 	bl	8002ea4 <memset>
 800305c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003064:	4620      	mov	r0, r4
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003068:	3468      	adds	r4, #104	; 0x68
 800306a:	e7d9      	b.n	8003020 <__sfp+0x1c>
 800306c:	2104      	movs	r1, #4
 800306e:	4638      	mov	r0, r7
 8003070:	f7ff ff62 	bl	8002f38 <__sfmoreglue>
 8003074:	4604      	mov	r4, r0
 8003076:	6030      	str	r0, [r6, #0]
 8003078:	2800      	cmp	r0, #0
 800307a:	d1d5      	bne.n	8003028 <__sfp+0x24>
 800307c:	f7ff ff78 	bl	8002f70 <__sfp_lock_release>
 8003080:	230c      	movs	r3, #12
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	e7ee      	b.n	8003064 <__sfp+0x60>
 8003086:	bf00      	nop
 8003088:	08003e24 	.word	0x08003e24
 800308c:	ffff0001 	.word	0xffff0001

08003090 <_fwalk_reent>:
 8003090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003094:	4606      	mov	r6, r0
 8003096:	4688      	mov	r8, r1
 8003098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800309c:	2700      	movs	r7, #0
 800309e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030a2:	f1b9 0901 	subs.w	r9, r9, #1
 80030a6:	d505      	bpl.n	80030b4 <_fwalk_reent+0x24>
 80030a8:	6824      	ldr	r4, [r4, #0]
 80030aa:	2c00      	cmp	r4, #0
 80030ac:	d1f7      	bne.n	800309e <_fwalk_reent+0xe>
 80030ae:	4638      	mov	r0, r7
 80030b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b4:	89ab      	ldrh	r3, [r5, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d907      	bls.n	80030ca <_fwalk_reent+0x3a>
 80030ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030be:	3301      	adds	r3, #1
 80030c0:	d003      	beq.n	80030ca <_fwalk_reent+0x3a>
 80030c2:	4629      	mov	r1, r5
 80030c4:	4630      	mov	r0, r6
 80030c6:	47c0      	blx	r8
 80030c8:	4307      	orrs	r7, r0
 80030ca:	3568      	adds	r5, #104	; 0x68
 80030cc:	e7e9      	b.n	80030a2 <_fwalk_reent+0x12>

080030ce <__retarget_lock_init_recursive>:
 80030ce:	4770      	bx	lr

080030d0 <__retarget_lock_acquire_recursive>:
 80030d0:	4770      	bx	lr

080030d2 <__retarget_lock_release_recursive>:
 80030d2:	4770      	bx	lr

080030d4 <sbrk_aligned>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	4e0e      	ldr	r6, [pc, #56]	; (8003110 <sbrk_aligned+0x3c>)
 80030d8:	460c      	mov	r4, r1
 80030da:	6831      	ldr	r1, [r6, #0]
 80030dc:	4605      	mov	r5, r0
 80030de:	b911      	cbnz	r1, 80030e6 <sbrk_aligned+0x12>
 80030e0:	f000 fb7a 	bl	80037d8 <_sbrk_r>
 80030e4:	6030      	str	r0, [r6, #0]
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f000 fb75 	bl	80037d8 <_sbrk_r>
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	d00a      	beq.n	8003108 <sbrk_aligned+0x34>
 80030f2:	1cc4      	adds	r4, r0, #3
 80030f4:	f024 0403 	bic.w	r4, r4, #3
 80030f8:	42a0      	cmp	r0, r4
 80030fa:	d007      	beq.n	800310c <sbrk_aligned+0x38>
 80030fc:	1a21      	subs	r1, r4, r0
 80030fe:	4628      	mov	r0, r5
 8003100:	f000 fb6a 	bl	80037d8 <_sbrk_r>
 8003104:	3001      	adds	r0, #1
 8003106:	d101      	bne.n	800310c <sbrk_aligned+0x38>
 8003108:	f04f 34ff 	mov.w	r4, #4294967295
 800310c:	4620      	mov	r0, r4
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	2000077c 	.word	0x2000077c

08003114 <_malloc_r>:
 8003114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003118:	1ccd      	adds	r5, r1, #3
 800311a:	f025 0503 	bic.w	r5, r5, #3
 800311e:	3508      	adds	r5, #8
 8003120:	2d0c      	cmp	r5, #12
 8003122:	bf38      	it	cc
 8003124:	250c      	movcc	r5, #12
 8003126:	2d00      	cmp	r5, #0
 8003128:	4607      	mov	r7, r0
 800312a:	db01      	blt.n	8003130 <_malloc_r+0x1c>
 800312c:	42a9      	cmp	r1, r5
 800312e:	d905      	bls.n	800313c <_malloc_r+0x28>
 8003130:	230c      	movs	r3, #12
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	2600      	movs	r6, #0
 8003136:	4630      	mov	r0, r6
 8003138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800313c:	4e2e      	ldr	r6, [pc, #184]	; (80031f8 <_malloc_r+0xe4>)
 800313e:	f000 fdbb 	bl	8003cb8 <__malloc_lock>
 8003142:	6833      	ldr	r3, [r6, #0]
 8003144:	461c      	mov	r4, r3
 8003146:	bb34      	cbnz	r4, 8003196 <_malloc_r+0x82>
 8003148:	4629      	mov	r1, r5
 800314a:	4638      	mov	r0, r7
 800314c:	f7ff ffc2 	bl	80030d4 <sbrk_aligned>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	4604      	mov	r4, r0
 8003154:	d14d      	bne.n	80031f2 <_malloc_r+0xde>
 8003156:	6834      	ldr	r4, [r6, #0]
 8003158:	4626      	mov	r6, r4
 800315a:	2e00      	cmp	r6, #0
 800315c:	d140      	bne.n	80031e0 <_malloc_r+0xcc>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	4631      	mov	r1, r6
 8003162:	4638      	mov	r0, r7
 8003164:	eb04 0803 	add.w	r8, r4, r3
 8003168:	f000 fb36 	bl	80037d8 <_sbrk_r>
 800316c:	4580      	cmp	r8, r0
 800316e:	d13a      	bne.n	80031e6 <_malloc_r+0xd2>
 8003170:	6821      	ldr	r1, [r4, #0]
 8003172:	3503      	adds	r5, #3
 8003174:	1a6d      	subs	r5, r5, r1
 8003176:	f025 0503 	bic.w	r5, r5, #3
 800317a:	3508      	adds	r5, #8
 800317c:	2d0c      	cmp	r5, #12
 800317e:	bf38      	it	cc
 8003180:	250c      	movcc	r5, #12
 8003182:	4629      	mov	r1, r5
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff ffa5 	bl	80030d4 <sbrk_aligned>
 800318a:	3001      	adds	r0, #1
 800318c:	d02b      	beq.n	80031e6 <_malloc_r+0xd2>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	442b      	add	r3, r5
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	e00e      	b.n	80031b4 <_malloc_r+0xa0>
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	1b52      	subs	r2, r2, r5
 800319a:	d41e      	bmi.n	80031da <_malloc_r+0xc6>
 800319c:	2a0b      	cmp	r2, #11
 800319e:	d916      	bls.n	80031ce <_malloc_r+0xba>
 80031a0:	1961      	adds	r1, r4, r5
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	6025      	str	r5, [r4, #0]
 80031a6:	bf18      	it	ne
 80031a8:	6059      	strne	r1, [r3, #4]
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	bf08      	it	eq
 80031ae:	6031      	streq	r1, [r6, #0]
 80031b0:	5162      	str	r2, [r4, r5]
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	4638      	mov	r0, r7
 80031b6:	f104 060b 	add.w	r6, r4, #11
 80031ba:	f000 fd83 	bl	8003cc4 <__malloc_unlock>
 80031be:	f026 0607 	bic.w	r6, r6, #7
 80031c2:	1d23      	adds	r3, r4, #4
 80031c4:	1af2      	subs	r2, r6, r3
 80031c6:	d0b6      	beq.n	8003136 <_malloc_r+0x22>
 80031c8:	1b9b      	subs	r3, r3, r6
 80031ca:	50a3      	str	r3, [r4, r2]
 80031cc:	e7b3      	b.n	8003136 <_malloc_r+0x22>
 80031ce:	6862      	ldr	r2, [r4, #4]
 80031d0:	42a3      	cmp	r3, r4
 80031d2:	bf0c      	ite	eq
 80031d4:	6032      	streq	r2, [r6, #0]
 80031d6:	605a      	strne	r2, [r3, #4]
 80031d8:	e7ec      	b.n	80031b4 <_malloc_r+0xa0>
 80031da:	4623      	mov	r3, r4
 80031dc:	6864      	ldr	r4, [r4, #4]
 80031de:	e7b2      	b.n	8003146 <_malloc_r+0x32>
 80031e0:	4634      	mov	r4, r6
 80031e2:	6876      	ldr	r6, [r6, #4]
 80031e4:	e7b9      	b.n	800315a <_malloc_r+0x46>
 80031e6:	230c      	movs	r3, #12
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4638      	mov	r0, r7
 80031ec:	f000 fd6a 	bl	8003cc4 <__malloc_unlock>
 80031f0:	e7a1      	b.n	8003136 <_malloc_r+0x22>
 80031f2:	6025      	str	r5, [r4, #0]
 80031f4:	e7de      	b.n	80031b4 <_malloc_r+0xa0>
 80031f6:	bf00      	nop
 80031f8:	20000778 	.word	0x20000778

080031fc <__sfputc_r>:
 80031fc:	6893      	ldr	r3, [r2, #8]
 80031fe:	3b01      	subs	r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	b410      	push	{r4}
 8003204:	6093      	str	r3, [r2, #8]
 8003206:	da08      	bge.n	800321a <__sfputc_r+0x1e>
 8003208:	6994      	ldr	r4, [r2, #24]
 800320a:	42a3      	cmp	r3, r4
 800320c:	db01      	blt.n	8003212 <__sfputc_r+0x16>
 800320e:	290a      	cmp	r1, #10
 8003210:	d103      	bne.n	800321a <__sfputc_r+0x1e>
 8003212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003216:	f000 bb33 	b.w	8003880 <__swbuf_r>
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	1c58      	adds	r0, r3, #1
 800321e:	6010      	str	r0, [r2, #0]
 8003220:	7019      	strb	r1, [r3, #0]
 8003222:	4608      	mov	r0, r1
 8003224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003228:	4770      	bx	lr

0800322a <__sfputs_r>:
 800322a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322c:	4606      	mov	r6, r0
 800322e:	460f      	mov	r7, r1
 8003230:	4614      	mov	r4, r2
 8003232:	18d5      	adds	r5, r2, r3
 8003234:	42ac      	cmp	r4, r5
 8003236:	d101      	bne.n	800323c <__sfputs_r+0x12>
 8003238:	2000      	movs	r0, #0
 800323a:	e007      	b.n	800324c <__sfputs_r+0x22>
 800323c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003240:	463a      	mov	r2, r7
 8003242:	4630      	mov	r0, r6
 8003244:	f7ff ffda 	bl	80031fc <__sfputc_r>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d1f3      	bne.n	8003234 <__sfputs_r+0xa>
 800324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003250 <_vfiprintf_r>:
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	460d      	mov	r5, r1
 8003256:	b09d      	sub	sp, #116	; 0x74
 8003258:	4614      	mov	r4, r2
 800325a:	4698      	mov	r8, r3
 800325c:	4606      	mov	r6, r0
 800325e:	b118      	cbz	r0, 8003268 <_vfiprintf_r+0x18>
 8003260:	6983      	ldr	r3, [r0, #24]
 8003262:	b90b      	cbnz	r3, 8003268 <_vfiprintf_r+0x18>
 8003264:	f7ff fe96 	bl	8002f94 <__sinit>
 8003268:	4b89      	ldr	r3, [pc, #548]	; (8003490 <_vfiprintf_r+0x240>)
 800326a:	429d      	cmp	r5, r3
 800326c:	d11b      	bne.n	80032a6 <_vfiprintf_r+0x56>
 800326e:	6875      	ldr	r5, [r6, #4]
 8003270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003272:	07d9      	lsls	r1, r3, #31
 8003274:	d405      	bmi.n	8003282 <_vfiprintf_r+0x32>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	059a      	lsls	r2, r3, #22
 800327a:	d402      	bmi.n	8003282 <_vfiprintf_r+0x32>
 800327c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800327e:	f7ff ff27 	bl	80030d0 <__retarget_lock_acquire_recursive>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	d501      	bpl.n	800328c <_vfiprintf_r+0x3c>
 8003288:	692b      	ldr	r3, [r5, #16]
 800328a:	b9eb      	cbnz	r3, 80032c8 <_vfiprintf_r+0x78>
 800328c:	4629      	mov	r1, r5
 800328e:	4630      	mov	r0, r6
 8003290:	f000 fb5a 	bl	8003948 <__swsetup_r>
 8003294:	b1c0      	cbz	r0, 80032c8 <_vfiprintf_r+0x78>
 8003296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003298:	07dc      	lsls	r4, r3, #31
 800329a:	d50e      	bpl.n	80032ba <_vfiprintf_r+0x6a>
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	b01d      	add	sp, #116	; 0x74
 80032a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a6:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <_vfiprintf_r+0x244>)
 80032a8:	429d      	cmp	r5, r3
 80032aa:	d101      	bne.n	80032b0 <_vfiprintf_r+0x60>
 80032ac:	68b5      	ldr	r5, [r6, #8]
 80032ae:	e7df      	b.n	8003270 <_vfiprintf_r+0x20>
 80032b0:	4b79      	ldr	r3, [pc, #484]	; (8003498 <_vfiprintf_r+0x248>)
 80032b2:	429d      	cmp	r5, r3
 80032b4:	bf08      	it	eq
 80032b6:	68f5      	ldreq	r5, [r6, #12]
 80032b8:	e7da      	b.n	8003270 <_vfiprintf_r+0x20>
 80032ba:	89ab      	ldrh	r3, [r5, #12]
 80032bc:	0598      	lsls	r0, r3, #22
 80032be:	d4ed      	bmi.n	800329c <_vfiprintf_r+0x4c>
 80032c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032c2:	f7ff ff06 	bl	80030d2 <__retarget_lock_release_recursive>
 80032c6:	e7e9      	b.n	800329c <_vfiprintf_r+0x4c>
 80032c8:	2300      	movs	r3, #0
 80032ca:	9309      	str	r3, [sp, #36]	; 0x24
 80032cc:	2320      	movs	r3, #32
 80032ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d6:	2330      	movs	r3, #48	; 0x30
 80032d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800349c <_vfiprintf_r+0x24c>
 80032dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e0:	f04f 0901 	mov.w	r9, #1
 80032e4:	4623      	mov	r3, r4
 80032e6:	469a      	mov	sl, r3
 80032e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ec:	b10a      	cbz	r2, 80032f2 <_vfiprintf_r+0xa2>
 80032ee:	2a25      	cmp	r2, #37	; 0x25
 80032f0:	d1f9      	bne.n	80032e6 <_vfiprintf_r+0x96>
 80032f2:	ebba 0b04 	subs.w	fp, sl, r4
 80032f6:	d00b      	beq.n	8003310 <_vfiprintf_r+0xc0>
 80032f8:	465b      	mov	r3, fp
 80032fa:	4622      	mov	r2, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	4630      	mov	r0, r6
 8003300:	f7ff ff93 	bl	800322a <__sfputs_r>
 8003304:	3001      	adds	r0, #1
 8003306:	f000 80aa 	beq.w	800345e <_vfiprintf_r+0x20e>
 800330a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800330c:	445a      	add	r2, fp
 800330e:	9209      	str	r2, [sp, #36]	; 0x24
 8003310:	f89a 3000 	ldrb.w	r3, [sl]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a2 	beq.w	800345e <_vfiprintf_r+0x20e>
 800331a:	2300      	movs	r3, #0
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003324:	f10a 0a01 	add.w	sl, sl, #1
 8003328:	9304      	str	r3, [sp, #16]
 800332a:	9307      	str	r3, [sp, #28]
 800332c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003330:	931a      	str	r3, [sp, #104]	; 0x68
 8003332:	4654      	mov	r4, sl
 8003334:	2205      	movs	r2, #5
 8003336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333a:	4858      	ldr	r0, [pc, #352]	; (800349c <_vfiprintf_r+0x24c>)
 800333c:	f7fc ff48 	bl	80001d0 <memchr>
 8003340:	9a04      	ldr	r2, [sp, #16]
 8003342:	b9d8      	cbnz	r0, 800337c <_vfiprintf_r+0x12c>
 8003344:	06d1      	lsls	r1, r2, #27
 8003346:	bf44      	itt	mi
 8003348:	2320      	movmi	r3, #32
 800334a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800334e:	0713      	lsls	r3, r2, #28
 8003350:	bf44      	itt	mi
 8003352:	232b      	movmi	r3, #43	; 0x2b
 8003354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003358:	f89a 3000 	ldrb.w	r3, [sl]
 800335c:	2b2a      	cmp	r3, #42	; 0x2a
 800335e:	d015      	beq.n	800338c <_vfiprintf_r+0x13c>
 8003360:	9a07      	ldr	r2, [sp, #28]
 8003362:	4654      	mov	r4, sl
 8003364:	2000      	movs	r0, #0
 8003366:	f04f 0c0a 	mov.w	ip, #10
 800336a:	4621      	mov	r1, r4
 800336c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003370:	3b30      	subs	r3, #48	; 0x30
 8003372:	2b09      	cmp	r3, #9
 8003374:	d94e      	bls.n	8003414 <_vfiprintf_r+0x1c4>
 8003376:	b1b0      	cbz	r0, 80033a6 <_vfiprintf_r+0x156>
 8003378:	9207      	str	r2, [sp, #28]
 800337a:	e014      	b.n	80033a6 <_vfiprintf_r+0x156>
 800337c:	eba0 0308 	sub.w	r3, r0, r8
 8003380:	fa09 f303 	lsl.w	r3, r9, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	46a2      	mov	sl, r4
 800338a:	e7d2      	b.n	8003332 <_vfiprintf_r+0xe2>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	1d19      	adds	r1, r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	9103      	str	r1, [sp, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	bfbb      	ittet	lt
 8003398:	425b      	neglt	r3, r3
 800339a:	f042 0202 	orrlt.w	r2, r2, #2
 800339e:	9307      	strge	r3, [sp, #28]
 80033a0:	9307      	strlt	r3, [sp, #28]
 80033a2:	bfb8      	it	lt
 80033a4:	9204      	strlt	r2, [sp, #16]
 80033a6:	7823      	ldrb	r3, [r4, #0]
 80033a8:	2b2e      	cmp	r3, #46	; 0x2e
 80033aa:	d10c      	bne.n	80033c6 <_vfiprintf_r+0x176>
 80033ac:	7863      	ldrb	r3, [r4, #1]
 80033ae:	2b2a      	cmp	r3, #42	; 0x2a
 80033b0:	d135      	bne.n	800341e <_vfiprintf_r+0x1ce>
 80033b2:	9b03      	ldr	r3, [sp, #12]
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9203      	str	r2, [sp, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfb8      	it	lt
 80033be:	f04f 33ff 	movlt.w	r3, #4294967295
 80033c2:	3402      	adds	r4, #2
 80033c4:	9305      	str	r3, [sp, #20]
 80033c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80034ac <_vfiprintf_r+0x25c>
 80033ca:	7821      	ldrb	r1, [r4, #0]
 80033cc:	2203      	movs	r2, #3
 80033ce:	4650      	mov	r0, sl
 80033d0:	f7fc fefe 	bl	80001d0 <memchr>
 80033d4:	b140      	cbz	r0, 80033e8 <_vfiprintf_r+0x198>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	eba0 000a 	sub.w	r0, r0, sl
 80033dc:	fa03 f000 	lsl.w	r0, r3, r0
 80033e0:	9b04      	ldr	r3, [sp, #16]
 80033e2:	4303      	orrs	r3, r0
 80033e4:	3401      	adds	r4, #1
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ec:	482c      	ldr	r0, [pc, #176]	; (80034a0 <_vfiprintf_r+0x250>)
 80033ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f2:	2206      	movs	r2, #6
 80033f4:	f7fc feec 	bl	80001d0 <memchr>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d03f      	beq.n	800347c <_vfiprintf_r+0x22c>
 80033fc:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <_vfiprintf_r+0x254>)
 80033fe:	bb1b      	cbnz	r3, 8003448 <_vfiprintf_r+0x1f8>
 8003400:	9b03      	ldr	r3, [sp, #12]
 8003402:	3307      	adds	r3, #7
 8003404:	f023 0307 	bic.w	r3, r3, #7
 8003408:	3308      	adds	r3, #8
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340e:	443b      	add	r3, r7
 8003410:	9309      	str	r3, [sp, #36]	; 0x24
 8003412:	e767      	b.n	80032e4 <_vfiprintf_r+0x94>
 8003414:	fb0c 3202 	mla	r2, ip, r2, r3
 8003418:	460c      	mov	r4, r1
 800341a:	2001      	movs	r0, #1
 800341c:	e7a5      	b.n	800336a <_vfiprintf_r+0x11a>
 800341e:	2300      	movs	r3, #0
 8003420:	3401      	adds	r4, #1
 8003422:	9305      	str	r3, [sp, #20]
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0c0a 	mov.w	ip, #10
 800342a:	4620      	mov	r0, r4
 800342c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003430:	3a30      	subs	r2, #48	; 0x30
 8003432:	2a09      	cmp	r2, #9
 8003434:	d903      	bls.n	800343e <_vfiprintf_r+0x1ee>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0c5      	beq.n	80033c6 <_vfiprintf_r+0x176>
 800343a:	9105      	str	r1, [sp, #20]
 800343c:	e7c3      	b.n	80033c6 <_vfiprintf_r+0x176>
 800343e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003442:	4604      	mov	r4, r0
 8003444:	2301      	movs	r3, #1
 8003446:	e7f0      	b.n	800342a <_vfiprintf_r+0x1da>
 8003448:	ab03      	add	r3, sp, #12
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	462a      	mov	r2, r5
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <_vfiprintf_r+0x258>)
 8003450:	a904      	add	r1, sp, #16
 8003452:	4630      	mov	r0, r6
 8003454:	f3af 8000 	nop.w
 8003458:	4607      	mov	r7, r0
 800345a:	1c78      	adds	r0, r7, #1
 800345c:	d1d6      	bne.n	800340c <_vfiprintf_r+0x1bc>
 800345e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003460:	07d9      	lsls	r1, r3, #31
 8003462:	d405      	bmi.n	8003470 <_vfiprintf_r+0x220>
 8003464:	89ab      	ldrh	r3, [r5, #12]
 8003466:	059a      	lsls	r2, r3, #22
 8003468:	d402      	bmi.n	8003470 <_vfiprintf_r+0x220>
 800346a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800346c:	f7ff fe31 	bl	80030d2 <__retarget_lock_release_recursive>
 8003470:	89ab      	ldrh	r3, [r5, #12]
 8003472:	065b      	lsls	r3, r3, #25
 8003474:	f53f af12 	bmi.w	800329c <_vfiprintf_r+0x4c>
 8003478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800347a:	e711      	b.n	80032a0 <_vfiprintf_r+0x50>
 800347c:	ab03      	add	r3, sp, #12
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	462a      	mov	r2, r5
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <_vfiprintf_r+0x258>)
 8003484:	a904      	add	r1, sp, #16
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f880 	bl	800358c <_printf_i>
 800348c:	e7e4      	b.n	8003458 <_vfiprintf_r+0x208>
 800348e:	bf00      	nop
 8003490:	08003e48 	.word	0x08003e48
 8003494:	08003e68 	.word	0x08003e68
 8003498:	08003e28 	.word	0x08003e28
 800349c:	08003e88 	.word	0x08003e88
 80034a0:	08003e92 	.word	0x08003e92
 80034a4:	00000000 	.word	0x00000000
 80034a8:	0800322b 	.word	0x0800322b
 80034ac:	08003e8e 	.word	0x08003e8e

080034b0 <_printf_common>:
 80034b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b4:	4616      	mov	r6, r2
 80034b6:	4699      	mov	r9, r3
 80034b8:	688a      	ldr	r2, [r1, #8]
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bfb8      	it	lt
 80034c4:	4613      	movlt	r3, r2
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034cc:	4607      	mov	r7, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	b10a      	cbz	r2, 80034d6 <_printf_common+0x26>
 80034d2:	3301      	adds	r3, #1
 80034d4:	6033      	str	r3, [r6, #0]
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	0699      	lsls	r1, r3, #26
 80034da:	bf42      	ittt	mi
 80034dc:	6833      	ldrmi	r3, [r6, #0]
 80034de:	3302      	addmi	r3, #2
 80034e0:	6033      	strmi	r3, [r6, #0]
 80034e2:	6825      	ldr	r5, [r4, #0]
 80034e4:	f015 0506 	ands.w	r5, r5, #6
 80034e8:	d106      	bne.n	80034f8 <_printf_common+0x48>
 80034ea:	f104 0a19 	add.w	sl, r4, #25
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	6832      	ldr	r2, [r6, #0]
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	42ab      	cmp	r3, r5
 80034f6:	dc26      	bgt.n	8003546 <_printf_common+0x96>
 80034f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034fc:	1e13      	subs	r3, r2, #0
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	bf18      	it	ne
 8003502:	2301      	movne	r3, #1
 8003504:	0692      	lsls	r2, r2, #26
 8003506:	d42b      	bmi.n	8003560 <_printf_common+0xb0>
 8003508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800350c:	4649      	mov	r1, r9
 800350e:	4638      	mov	r0, r7
 8003510:	47c0      	blx	r8
 8003512:	3001      	adds	r0, #1
 8003514:	d01e      	beq.n	8003554 <_printf_common+0xa4>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	68e5      	ldr	r5, [r4, #12]
 800351a:	6832      	ldr	r2, [r6, #0]
 800351c:	f003 0306 	and.w	r3, r3, #6
 8003520:	2b04      	cmp	r3, #4
 8003522:	bf08      	it	eq
 8003524:	1aad      	subeq	r5, r5, r2
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	6922      	ldr	r2, [r4, #16]
 800352a:	bf0c      	ite	eq
 800352c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003530:	2500      	movne	r5, #0
 8003532:	4293      	cmp	r3, r2
 8003534:	bfc4      	itt	gt
 8003536:	1a9b      	subgt	r3, r3, r2
 8003538:	18ed      	addgt	r5, r5, r3
 800353a:	2600      	movs	r6, #0
 800353c:	341a      	adds	r4, #26
 800353e:	42b5      	cmp	r5, r6
 8003540:	d11a      	bne.n	8003578 <_printf_common+0xc8>
 8003542:	2000      	movs	r0, #0
 8003544:	e008      	b.n	8003558 <_printf_common+0xa8>
 8003546:	2301      	movs	r3, #1
 8003548:	4652      	mov	r2, sl
 800354a:	4649      	mov	r1, r9
 800354c:	4638      	mov	r0, r7
 800354e:	47c0      	blx	r8
 8003550:	3001      	adds	r0, #1
 8003552:	d103      	bne.n	800355c <_printf_common+0xac>
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355c:	3501      	adds	r5, #1
 800355e:	e7c6      	b.n	80034ee <_printf_common+0x3e>
 8003560:	18e1      	adds	r1, r4, r3
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	2030      	movs	r0, #48	; 0x30
 8003566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356a:	4422      	add	r2, r4
 800356c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003574:	3302      	adds	r3, #2
 8003576:	e7c7      	b.n	8003508 <_printf_common+0x58>
 8003578:	2301      	movs	r3, #1
 800357a:	4622      	mov	r2, r4
 800357c:	4649      	mov	r1, r9
 800357e:	4638      	mov	r0, r7
 8003580:	47c0      	blx	r8
 8003582:	3001      	adds	r0, #1
 8003584:	d0e6      	beq.n	8003554 <_printf_common+0xa4>
 8003586:	3601      	adds	r6, #1
 8003588:	e7d9      	b.n	800353e <_printf_common+0x8e>
	...

0800358c <_printf_i>:
 800358c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	7e0f      	ldrb	r7, [r1, #24]
 8003592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003594:	2f78      	cmp	r7, #120	; 0x78
 8003596:	4691      	mov	r9, r2
 8003598:	4680      	mov	r8, r0
 800359a:	460c      	mov	r4, r1
 800359c:	469a      	mov	sl, r3
 800359e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035a2:	d807      	bhi.n	80035b4 <_printf_i+0x28>
 80035a4:	2f62      	cmp	r7, #98	; 0x62
 80035a6:	d80a      	bhi.n	80035be <_printf_i+0x32>
 80035a8:	2f00      	cmp	r7, #0
 80035aa:	f000 80d8 	beq.w	800375e <_printf_i+0x1d2>
 80035ae:	2f58      	cmp	r7, #88	; 0x58
 80035b0:	f000 80a3 	beq.w	80036fa <_printf_i+0x16e>
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035bc:	e03a      	b.n	8003634 <_printf_i+0xa8>
 80035be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035c2:	2b15      	cmp	r3, #21
 80035c4:	d8f6      	bhi.n	80035b4 <_printf_i+0x28>
 80035c6:	a101      	add	r1, pc, #4	; (adr r1, 80035cc <_printf_i+0x40>)
 80035c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035cc:	08003625 	.word	0x08003625
 80035d0:	08003639 	.word	0x08003639
 80035d4:	080035b5 	.word	0x080035b5
 80035d8:	080035b5 	.word	0x080035b5
 80035dc:	080035b5 	.word	0x080035b5
 80035e0:	080035b5 	.word	0x080035b5
 80035e4:	08003639 	.word	0x08003639
 80035e8:	080035b5 	.word	0x080035b5
 80035ec:	080035b5 	.word	0x080035b5
 80035f0:	080035b5 	.word	0x080035b5
 80035f4:	080035b5 	.word	0x080035b5
 80035f8:	08003745 	.word	0x08003745
 80035fc:	08003669 	.word	0x08003669
 8003600:	08003727 	.word	0x08003727
 8003604:	080035b5 	.word	0x080035b5
 8003608:	080035b5 	.word	0x080035b5
 800360c:	08003767 	.word	0x08003767
 8003610:	080035b5 	.word	0x080035b5
 8003614:	08003669 	.word	0x08003669
 8003618:	080035b5 	.word	0x080035b5
 800361c:	080035b5 	.word	0x080035b5
 8003620:	0800372f 	.word	0x0800372f
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	602a      	str	r2, [r5, #0]
 800362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003634:	2301      	movs	r3, #1
 8003636:	e0a3      	b.n	8003780 <_printf_i+0x1f4>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	6829      	ldr	r1, [r5, #0]
 800363c:	0606      	lsls	r6, r0, #24
 800363e:	f101 0304 	add.w	r3, r1, #4
 8003642:	d50a      	bpl.n	800365a <_printf_i+0xce>
 8003644:	680e      	ldr	r6, [r1, #0]
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	2e00      	cmp	r6, #0
 800364a:	da03      	bge.n	8003654 <_printf_i+0xc8>
 800364c:	232d      	movs	r3, #45	; 0x2d
 800364e:	4276      	negs	r6, r6
 8003650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003654:	485e      	ldr	r0, [pc, #376]	; (80037d0 <_printf_i+0x244>)
 8003656:	230a      	movs	r3, #10
 8003658:	e019      	b.n	800368e <_printf_i+0x102>
 800365a:	680e      	ldr	r6, [r1, #0]
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003662:	bf18      	it	ne
 8003664:	b236      	sxthne	r6, r6
 8003666:	e7ef      	b.n	8003648 <_printf_i+0xbc>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	6029      	str	r1, [r5, #0]
 8003670:	0601      	lsls	r1, r0, #24
 8003672:	d501      	bpl.n	8003678 <_printf_i+0xec>
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	e002      	b.n	800367e <_printf_i+0xf2>
 8003678:	0646      	lsls	r6, r0, #25
 800367a:	d5fb      	bpl.n	8003674 <_printf_i+0xe8>
 800367c:	881e      	ldrh	r6, [r3, #0]
 800367e:	4854      	ldr	r0, [pc, #336]	; (80037d0 <_printf_i+0x244>)
 8003680:	2f6f      	cmp	r7, #111	; 0x6f
 8003682:	bf0c      	ite	eq
 8003684:	2308      	moveq	r3, #8
 8003686:	230a      	movne	r3, #10
 8003688:	2100      	movs	r1, #0
 800368a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800368e:	6865      	ldr	r5, [r4, #4]
 8003690:	60a5      	str	r5, [r4, #8]
 8003692:	2d00      	cmp	r5, #0
 8003694:	bfa2      	ittt	ge
 8003696:	6821      	ldrge	r1, [r4, #0]
 8003698:	f021 0104 	bicge.w	r1, r1, #4
 800369c:	6021      	strge	r1, [r4, #0]
 800369e:	b90e      	cbnz	r6, 80036a4 <_printf_i+0x118>
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	d04d      	beq.n	8003740 <_printf_i+0x1b4>
 80036a4:	4615      	mov	r5, r2
 80036a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80036aa:	fb03 6711 	mls	r7, r3, r1, r6
 80036ae:	5dc7      	ldrb	r7, [r0, r7]
 80036b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036b4:	4637      	mov	r7, r6
 80036b6:	42bb      	cmp	r3, r7
 80036b8:	460e      	mov	r6, r1
 80036ba:	d9f4      	bls.n	80036a6 <_printf_i+0x11a>
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10b      	bne.n	80036d8 <_printf_i+0x14c>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	07de      	lsls	r6, r3, #31
 80036c4:	d508      	bpl.n	80036d8 <_printf_i+0x14c>
 80036c6:	6923      	ldr	r3, [r4, #16]
 80036c8:	6861      	ldr	r1, [r4, #4]
 80036ca:	4299      	cmp	r1, r3
 80036cc:	bfde      	ittt	le
 80036ce:	2330      	movle	r3, #48	; 0x30
 80036d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036d8:	1b52      	subs	r2, r2, r5
 80036da:	6122      	str	r2, [r4, #16]
 80036dc:	f8cd a000 	str.w	sl, [sp]
 80036e0:	464b      	mov	r3, r9
 80036e2:	aa03      	add	r2, sp, #12
 80036e4:	4621      	mov	r1, r4
 80036e6:	4640      	mov	r0, r8
 80036e8:	f7ff fee2 	bl	80034b0 <_printf_common>
 80036ec:	3001      	adds	r0, #1
 80036ee:	d14c      	bne.n	800378a <_printf_i+0x1fe>
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	b004      	add	sp, #16
 80036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fa:	4835      	ldr	r0, [pc, #212]	; (80037d0 <_printf_i+0x244>)
 80036fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003700:	6829      	ldr	r1, [r5, #0]
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	f851 6b04 	ldr.w	r6, [r1], #4
 8003708:	6029      	str	r1, [r5, #0]
 800370a:	061d      	lsls	r5, r3, #24
 800370c:	d514      	bpl.n	8003738 <_printf_i+0x1ac>
 800370e:	07df      	lsls	r7, r3, #31
 8003710:	bf44      	itt	mi
 8003712:	f043 0320 	orrmi.w	r3, r3, #32
 8003716:	6023      	strmi	r3, [r4, #0]
 8003718:	b91e      	cbnz	r6, 8003722 <_printf_i+0x196>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	f023 0320 	bic.w	r3, r3, #32
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	2310      	movs	r3, #16
 8003724:	e7b0      	b.n	8003688 <_printf_i+0xfc>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	f043 0320 	orr.w	r3, r3, #32
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	2378      	movs	r3, #120	; 0x78
 8003730:	4828      	ldr	r0, [pc, #160]	; (80037d4 <_printf_i+0x248>)
 8003732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003736:	e7e3      	b.n	8003700 <_printf_i+0x174>
 8003738:	0659      	lsls	r1, r3, #25
 800373a:	bf48      	it	mi
 800373c:	b2b6      	uxthmi	r6, r6
 800373e:	e7e6      	b.n	800370e <_printf_i+0x182>
 8003740:	4615      	mov	r5, r2
 8003742:	e7bb      	b.n	80036bc <_printf_i+0x130>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	6826      	ldr	r6, [r4, #0]
 8003748:	6961      	ldr	r1, [r4, #20]
 800374a:	1d18      	adds	r0, r3, #4
 800374c:	6028      	str	r0, [r5, #0]
 800374e:	0635      	lsls	r5, r6, #24
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	d501      	bpl.n	8003758 <_printf_i+0x1cc>
 8003754:	6019      	str	r1, [r3, #0]
 8003756:	e002      	b.n	800375e <_printf_i+0x1d2>
 8003758:	0670      	lsls	r0, r6, #25
 800375a:	d5fb      	bpl.n	8003754 <_printf_i+0x1c8>
 800375c:	8019      	strh	r1, [r3, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	4615      	mov	r5, r2
 8003764:	e7ba      	b.n	80036dc <_printf_i+0x150>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	602a      	str	r2, [r5, #0]
 800376c:	681d      	ldr	r5, [r3, #0]
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	2100      	movs	r1, #0
 8003772:	4628      	mov	r0, r5
 8003774:	f7fc fd2c 	bl	80001d0 <memchr>
 8003778:	b108      	cbz	r0, 800377e <_printf_i+0x1f2>
 800377a:	1b40      	subs	r0, r0, r5
 800377c:	6060      	str	r0, [r4, #4]
 800377e:	6863      	ldr	r3, [r4, #4]
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	2300      	movs	r3, #0
 8003784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003788:	e7a8      	b.n	80036dc <_printf_i+0x150>
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	462a      	mov	r2, r5
 800378e:	4649      	mov	r1, r9
 8003790:	4640      	mov	r0, r8
 8003792:	47d0      	blx	sl
 8003794:	3001      	adds	r0, #1
 8003796:	d0ab      	beq.n	80036f0 <_printf_i+0x164>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	079b      	lsls	r3, r3, #30
 800379c:	d413      	bmi.n	80037c6 <_printf_i+0x23a>
 800379e:	68e0      	ldr	r0, [r4, #12]
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	4298      	cmp	r0, r3
 80037a4:	bfb8      	it	lt
 80037a6:	4618      	movlt	r0, r3
 80037a8:	e7a4      	b.n	80036f4 <_printf_i+0x168>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4632      	mov	r2, r6
 80037ae:	4649      	mov	r1, r9
 80037b0:	4640      	mov	r0, r8
 80037b2:	47d0      	blx	sl
 80037b4:	3001      	adds	r0, #1
 80037b6:	d09b      	beq.n	80036f0 <_printf_i+0x164>
 80037b8:	3501      	adds	r5, #1
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	9903      	ldr	r1, [sp, #12]
 80037be:	1a5b      	subs	r3, r3, r1
 80037c0:	42ab      	cmp	r3, r5
 80037c2:	dcf2      	bgt.n	80037aa <_printf_i+0x21e>
 80037c4:	e7eb      	b.n	800379e <_printf_i+0x212>
 80037c6:	2500      	movs	r5, #0
 80037c8:	f104 0619 	add.w	r6, r4, #25
 80037cc:	e7f5      	b.n	80037ba <_printf_i+0x22e>
 80037ce:	bf00      	nop
 80037d0:	08003e99 	.word	0x08003e99
 80037d4:	08003eaa 	.word	0x08003eaa

080037d8 <_sbrk_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d06      	ldr	r5, [pc, #24]	; (80037f4 <_sbrk_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fd fc70 	bl	80010c8 <_sbrk>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_sbrk_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_sbrk_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000780 	.word	0x20000780

080037f8 <__sread>:
 80037f8:	b510      	push	{r4, lr}
 80037fa:	460c      	mov	r4, r1
 80037fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003800:	f000 fab2 	bl	8003d68 <_read_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	bfab      	itete	ge
 8003808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800380a:	89a3      	ldrhlt	r3, [r4, #12]
 800380c:	181b      	addge	r3, r3, r0
 800380e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003812:	bfac      	ite	ge
 8003814:	6563      	strge	r3, [r4, #84]	; 0x54
 8003816:	81a3      	strhlt	r3, [r4, #12]
 8003818:	bd10      	pop	{r4, pc}

0800381a <__swrite>:
 800381a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381e:	461f      	mov	r7, r3
 8003820:	898b      	ldrh	r3, [r1, #12]
 8003822:	05db      	lsls	r3, r3, #23
 8003824:	4605      	mov	r5, r0
 8003826:	460c      	mov	r4, r1
 8003828:	4616      	mov	r6, r2
 800382a:	d505      	bpl.n	8003838 <__swrite+0x1e>
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	2302      	movs	r3, #2
 8003832:	2200      	movs	r2, #0
 8003834:	f000 f9c8 	bl	8003bc8 <_lseek_r>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800383e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	4632      	mov	r2, r6
 8003846:	463b      	mov	r3, r7
 8003848:	4628      	mov	r0, r5
 800384a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800384e:	f000 b869 	b.w	8003924 <_write_r>

08003852 <__sseek>:
 8003852:	b510      	push	{r4, lr}
 8003854:	460c      	mov	r4, r1
 8003856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385a:	f000 f9b5 	bl	8003bc8 <_lseek_r>
 800385e:	1c43      	adds	r3, r0, #1
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	bf15      	itete	ne
 8003864:	6560      	strne	r0, [r4, #84]	; 0x54
 8003866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800386a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800386e:	81a3      	strheq	r3, [r4, #12]
 8003870:	bf18      	it	ne
 8003872:	81a3      	strhne	r3, [r4, #12]
 8003874:	bd10      	pop	{r4, pc}

08003876 <__sclose>:
 8003876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800387a:	f000 b8d3 	b.w	8003a24 <_close_r>
	...

08003880 <__swbuf_r>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	460e      	mov	r6, r1
 8003884:	4614      	mov	r4, r2
 8003886:	4605      	mov	r5, r0
 8003888:	b118      	cbz	r0, 8003892 <__swbuf_r+0x12>
 800388a:	6983      	ldr	r3, [r0, #24]
 800388c:	b90b      	cbnz	r3, 8003892 <__swbuf_r+0x12>
 800388e:	f7ff fb81 	bl	8002f94 <__sinit>
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <__swbuf_r+0x98>)
 8003894:	429c      	cmp	r4, r3
 8003896:	d12b      	bne.n	80038f0 <__swbuf_r+0x70>
 8003898:	686c      	ldr	r4, [r5, #4]
 800389a:	69a3      	ldr	r3, [r4, #24]
 800389c:	60a3      	str	r3, [r4, #8]
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	071a      	lsls	r2, r3, #28
 80038a2:	d52f      	bpl.n	8003904 <__swbuf_r+0x84>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	b36b      	cbz	r3, 8003904 <__swbuf_r+0x84>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	1ac0      	subs	r0, r0, r3
 80038ae:	6963      	ldr	r3, [r4, #20]
 80038b0:	b2f6      	uxtb	r6, r6
 80038b2:	4283      	cmp	r3, r0
 80038b4:	4637      	mov	r7, r6
 80038b6:	dc04      	bgt.n	80038c2 <__swbuf_r+0x42>
 80038b8:	4621      	mov	r1, r4
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 f948 	bl	8003b50 <_fflush_r>
 80038c0:	bb30      	cbnz	r0, 8003910 <__swbuf_r+0x90>
 80038c2:	68a3      	ldr	r3, [r4, #8]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60a3      	str	r3, [r4, #8]
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	6022      	str	r2, [r4, #0]
 80038ce:	701e      	strb	r6, [r3, #0]
 80038d0:	6963      	ldr	r3, [r4, #20]
 80038d2:	3001      	adds	r0, #1
 80038d4:	4283      	cmp	r3, r0
 80038d6:	d004      	beq.n	80038e2 <__swbuf_r+0x62>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	07db      	lsls	r3, r3, #31
 80038dc:	d506      	bpl.n	80038ec <__swbuf_r+0x6c>
 80038de:	2e0a      	cmp	r6, #10
 80038e0:	d104      	bne.n	80038ec <__swbuf_r+0x6c>
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 f933 	bl	8003b50 <_fflush_r>
 80038ea:	b988      	cbnz	r0, 8003910 <__swbuf_r+0x90>
 80038ec:	4638      	mov	r0, r7
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <__swbuf_r+0x9c>)
 80038f2:	429c      	cmp	r4, r3
 80038f4:	d101      	bne.n	80038fa <__swbuf_r+0x7a>
 80038f6:	68ac      	ldr	r4, [r5, #8]
 80038f8:	e7cf      	b.n	800389a <__swbuf_r+0x1a>
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <__swbuf_r+0xa0>)
 80038fc:	429c      	cmp	r4, r3
 80038fe:	bf08      	it	eq
 8003900:	68ec      	ldreq	r4, [r5, #12]
 8003902:	e7ca      	b.n	800389a <__swbuf_r+0x1a>
 8003904:	4621      	mov	r1, r4
 8003906:	4628      	mov	r0, r5
 8003908:	f000 f81e 	bl	8003948 <__swsetup_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	d0cb      	beq.n	80038a8 <__swbuf_r+0x28>
 8003910:	f04f 37ff 	mov.w	r7, #4294967295
 8003914:	e7ea      	b.n	80038ec <__swbuf_r+0x6c>
 8003916:	bf00      	nop
 8003918:	08003e48 	.word	0x08003e48
 800391c:	08003e68 	.word	0x08003e68
 8003920:	08003e28 	.word	0x08003e28

08003924 <_write_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d07      	ldr	r5, [pc, #28]	; (8003944 <_write_r+0x20>)
 8003928:	4604      	mov	r4, r0
 800392a:	4608      	mov	r0, r1
 800392c:	4611      	mov	r1, r2
 800392e:	2200      	movs	r2, #0
 8003930:	602a      	str	r2, [r5, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	f7fd fb77 	bl	8001026 <_write>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_write_r+0x1e>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_write_r+0x1e>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	20000780 	.word	0x20000780

08003948 <__swsetup_r>:
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <__swsetup_r+0xcc>)
 800394a:	b570      	push	{r4, r5, r6, lr}
 800394c:	681d      	ldr	r5, [r3, #0]
 800394e:	4606      	mov	r6, r0
 8003950:	460c      	mov	r4, r1
 8003952:	b125      	cbz	r5, 800395e <__swsetup_r+0x16>
 8003954:	69ab      	ldr	r3, [r5, #24]
 8003956:	b913      	cbnz	r3, 800395e <__swsetup_r+0x16>
 8003958:	4628      	mov	r0, r5
 800395a:	f7ff fb1b 	bl	8002f94 <__sinit>
 800395e:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <__swsetup_r+0xd0>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d10f      	bne.n	8003984 <__swsetup_r+0x3c>
 8003964:	686c      	ldr	r4, [r5, #4]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d42c      	bmi.n	80039ca <__swsetup_r+0x82>
 8003970:	06dd      	lsls	r5, r3, #27
 8003972:	d411      	bmi.n	8003998 <__swsetup_r+0x50>
 8003974:	2309      	movs	r3, #9
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	e03e      	b.n	8003a02 <__swsetup_r+0xba>
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <__swsetup_r+0xd4>)
 8003986:	429c      	cmp	r4, r3
 8003988:	d101      	bne.n	800398e <__swsetup_r+0x46>
 800398a:	68ac      	ldr	r4, [r5, #8]
 800398c:	e7eb      	b.n	8003966 <__swsetup_r+0x1e>
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <__swsetup_r+0xd8>)
 8003990:	429c      	cmp	r4, r3
 8003992:	bf08      	it	eq
 8003994:	68ec      	ldreq	r4, [r5, #12]
 8003996:	e7e6      	b.n	8003966 <__swsetup_r+0x1e>
 8003998:	0758      	lsls	r0, r3, #29
 800399a:	d512      	bpl.n	80039c2 <__swsetup_r+0x7a>
 800399c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399e:	b141      	cbz	r1, 80039b2 <__swsetup_r+0x6a>
 80039a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a4:	4299      	cmp	r1, r3
 80039a6:	d002      	beq.n	80039ae <__swsetup_r+0x66>
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f991 	bl	8003cd0 <_free_r>
 80039ae:	2300      	movs	r3, #0
 80039b0:	6363      	str	r3, [r4, #52]	; 0x34
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	2300      	movs	r3, #0
 80039bc:	6063      	str	r3, [r4, #4]
 80039be:	6923      	ldr	r3, [r4, #16]
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	b94b      	cbnz	r3, 80039e2 <__swsetup_r+0x9a>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	d003      	beq.n	80039e2 <__swsetup_r+0x9a>
 80039da:	4621      	mov	r1, r4
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f92b 	bl	8003c38 <__smakebuf_r>
 80039e2:	89a0      	ldrh	r0, [r4, #12]
 80039e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039e8:	f010 0301 	ands.w	r3, r0, #1
 80039ec:	d00a      	beq.n	8003a04 <__swsetup_r+0xbc>
 80039ee:	2300      	movs	r3, #0
 80039f0:	60a3      	str	r3, [r4, #8]
 80039f2:	6963      	ldr	r3, [r4, #20]
 80039f4:	425b      	negs	r3, r3
 80039f6:	61a3      	str	r3, [r4, #24]
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	b943      	cbnz	r3, 8003a0e <__swsetup_r+0xc6>
 80039fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a00:	d1ba      	bne.n	8003978 <__swsetup_r+0x30>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	0781      	lsls	r1, r0, #30
 8003a06:	bf58      	it	pl
 8003a08:	6963      	ldrpl	r3, [r4, #20]
 8003a0a:	60a3      	str	r3, [r4, #8]
 8003a0c:	e7f4      	b.n	80039f8 <__swsetup_r+0xb0>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e7f7      	b.n	8003a02 <__swsetup_r+0xba>
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	08003e48 	.word	0x08003e48
 8003a1c:	08003e68 	.word	0x08003e68
 8003a20:	08003e28 	.word	0x08003e28

08003a24 <_close_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	; (8003a40 <_close_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd fb15 	bl	800105e <_close>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_close_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_close_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20000780 	.word	0x20000780

08003a44 <__sflush_r>:
 8003a44:	898a      	ldrh	r2, [r1, #12]
 8003a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	0710      	lsls	r0, r2, #28
 8003a4e:	460c      	mov	r4, r1
 8003a50:	d458      	bmi.n	8003b04 <__sflush_r+0xc0>
 8003a52:	684b      	ldr	r3, [r1, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	dc05      	bgt.n	8003a64 <__sflush_r+0x20>
 8003a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	dc02      	bgt.n	8003a64 <__sflush_r+0x20>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	d0f9      	beq.n	8003a5e <__sflush_r+0x1a>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a70:	682f      	ldr	r7, [r5, #0]
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	d032      	beq.n	8003adc <__sflush_r+0x98>
 8003a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	075a      	lsls	r2, r3, #29
 8003a7c:	d505      	bpl.n	8003a8a <__sflush_r+0x46>
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	1ac0      	subs	r0, r0, r3
 8003a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a84:	b10b      	cbz	r3, 8003a8a <__sflush_r+0x46>
 8003a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a88:	1ac0      	subs	r0, r0, r3
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a90:	6a21      	ldr	r1, [r4, #32]
 8003a92:	4628      	mov	r0, r5
 8003a94:	47b0      	blx	r6
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	d106      	bne.n	8003aaa <__sflush_r+0x66>
 8003a9c:	6829      	ldr	r1, [r5, #0]
 8003a9e:	291d      	cmp	r1, #29
 8003aa0:	d82c      	bhi.n	8003afc <__sflush_r+0xb8>
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <__sflush_r+0x108>)
 8003aa4:	40ca      	lsrs	r2, r1
 8003aa6:	07d6      	lsls	r6, r2, #31
 8003aa8:	d528      	bpl.n	8003afc <__sflush_r+0xb8>
 8003aaa:	2200      	movs	r2, #0
 8003aac:	6062      	str	r2, [r4, #4]
 8003aae:	04d9      	lsls	r1, r3, #19
 8003ab0:	6922      	ldr	r2, [r4, #16]
 8003ab2:	6022      	str	r2, [r4, #0]
 8003ab4:	d504      	bpl.n	8003ac0 <__sflush_r+0x7c>
 8003ab6:	1c42      	adds	r2, r0, #1
 8003ab8:	d101      	bne.n	8003abe <__sflush_r+0x7a>
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	b903      	cbnz	r3, 8003ac0 <__sflush_r+0x7c>
 8003abe:	6560      	str	r0, [r4, #84]	; 0x54
 8003ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac2:	602f      	str	r7, [r5, #0]
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d0ca      	beq.n	8003a5e <__sflush_r+0x1a>
 8003ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003acc:	4299      	cmp	r1, r3
 8003ace:	d002      	beq.n	8003ad6 <__sflush_r+0x92>
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 f8fd 	bl	8003cd0 <_free_r>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8003ada:	e7c1      	b.n	8003a60 <__sflush_r+0x1c>
 8003adc:	6a21      	ldr	r1, [r4, #32]
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b0      	blx	r6
 8003ae4:	1c41      	adds	r1, r0, #1
 8003ae6:	d1c7      	bne.n	8003a78 <__sflush_r+0x34>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0c4      	beq.n	8003a78 <__sflush_r+0x34>
 8003aee:	2b1d      	cmp	r3, #29
 8003af0:	d001      	beq.n	8003af6 <__sflush_r+0xb2>
 8003af2:	2b16      	cmp	r3, #22
 8003af4:	d101      	bne.n	8003afa <__sflush_r+0xb6>
 8003af6:	602f      	str	r7, [r5, #0]
 8003af8:	e7b1      	b.n	8003a5e <__sflush_r+0x1a>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	e7ad      	b.n	8003a60 <__sflush_r+0x1c>
 8003b04:	690f      	ldr	r7, [r1, #16]
 8003b06:	2f00      	cmp	r7, #0
 8003b08:	d0a9      	beq.n	8003a5e <__sflush_r+0x1a>
 8003b0a:	0793      	lsls	r3, r2, #30
 8003b0c:	680e      	ldr	r6, [r1, #0]
 8003b0e:	bf08      	it	eq
 8003b10:	694b      	ldreq	r3, [r1, #20]
 8003b12:	600f      	str	r7, [r1, #0]
 8003b14:	bf18      	it	ne
 8003b16:	2300      	movne	r3, #0
 8003b18:	eba6 0807 	sub.w	r8, r6, r7
 8003b1c:	608b      	str	r3, [r1, #8]
 8003b1e:	f1b8 0f00 	cmp.w	r8, #0
 8003b22:	dd9c      	ble.n	8003a5e <__sflush_r+0x1a>
 8003b24:	6a21      	ldr	r1, [r4, #32]
 8003b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b28:	4643      	mov	r3, r8
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	47b0      	blx	r6
 8003b30:	2800      	cmp	r0, #0
 8003b32:	dc06      	bgt.n	8003b42 <__sflush_r+0xfe>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3a:	81a3      	strh	r3, [r4, #12]
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	e78e      	b.n	8003a60 <__sflush_r+0x1c>
 8003b42:	4407      	add	r7, r0
 8003b44:	eba8 0800 	sub.w	r8, r8, r0
 8003b48:	e7e9      	b.n	8003b1e <__sflush_r+0xda>
 8003b4a:	bf00      	nop
 8003b4c:	20400001 	.word	0x20400001

08003b50 <_fflush_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	690b      	ldr	r3, [r1, #16]
 8003b54:	4605      	mov	r5, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	b913      	cbnz	r3, 8003b60 <_fflush_r+0x10>
 8003b5a:	2500      	movs	r5, #0
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	b118      	cbz	r0, 8003b6a <_fflush_r+0x1a>
 8003b62:	6983      	ldr	r3, [r0, #24]
 8003b64:	b90b      	cbnz	r3, 8003b6a <_fflush_r+0x1a>
 8003b66:	f7ff fa15 	bl	8002f94 <__sinit>
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <_fflush_r+0x6c>)
 8003b6c:	429c      	cmp	r4, r3
 8003b6e:	d11b      	bne.n	8003ba8 <_fflush_r+0x58>
 8003b70:	686c      	ldr	r4, [r5, #4]
 8003b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ef      	beq.n	8003b5a <_fflush_r+0xa>
 8003b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b7c:	07d0      	lsls	r0, r2, #31
 8003b7e:	d404      	bmi.n	8003b8a <_fflush_r+0x3a>
 8003b80:	0599      	lsls	r1, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_fflush_r+0x3a>
 8003b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b86:	f7ff faa3 	bl	80030d0 <__retarget_lock_acquire_recursive>
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	f7ff ff59 	bl	8003a44 <__sflush_r>
 8003b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b94:	07da      	lsls	r2, r3, #31
 8003b96:	4605      	mov	r5, r0
 8003b98:	d4e0      	bmi.n	8003b5c <_fflush_r+0xc>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	059b      	lsls	r3, r3, #22
 8003b9e:	d4dd      	bmi.n	8003b5c <_fflush_r+0xc>
 8003ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ba2:	f7ff fa96 	bl	80030d2 <__retarget_lock_release_recursive>
 8003ba6:	e7d9      	b.n	8003b5c <_fflush_r+0xc>
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <_fflush_r+0x70>)
 8003baa:	429c      	cmp	r4, r3
 8003bac:	d101      	bne.n	8003bb2 <_fflush_r+0x62>
 8003bae:	68ac      	ldr	r4, [r5, #8]
 8003bb0:	e7df      	b.n	8003b72 <_fflush_r+0x22>
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <_fflush_r+0x74>)
 8003bb4:	429c      	cmp	r4, r3
 8003bb6:	bf08      	it	eq
 8003bb8:	68ec      	ldreq	r4, [r5, #12]
 8003bba:	e7da      	b.n	8003b72 <_fflush_r+0x22>
 8003bbc:	08003e48 	.word	0x08003e48
 8003bc0:	08003e68 	.word	0x08003e68
 8003bc4:	08003e28 	.word	0x08003e28

08003bc8 <_lseek_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	; (8003be8 <_lseek_r+0x20>)
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4608      	mov	r0, r1
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fd fa68 	bl	80010ac <_lseek>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_lseek_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_lseek_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20000780 	.word	0x20000780

08003bec <__swhatbuf_r>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	460e      	mov	r6, r1
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	b096      	sub	sp, #88	; 0x58
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	da08      	bge.n	8003c10 <__swhatbuf_r+0x24>
 8003bfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	061a      	lsls	r2, r3, #24
 8003c08:	d410      	bmi.n	8003c2c <__swhatbuf_r+0x40>
 8003c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0e:	e00e      	b.n	8003c2e <__swhatbuf_r+0x42>
 8003c10:	466a      	mov	r2, sp
 8003c12:	f000 f8bb 	bl	8003d8c <_fstat_r>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	dbf1      	blt.n	8003bfe <__swhatbuf_r+0x12>
 8003c1a:	9a01      	ldr	r2, [sp, #4]
 8003c1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c24:	425a      	negs	r2, r3
 8003c26:	415a      	adcs	r2, r3
 8003c28:	602a      	str	r2, [r5, #0]
 8003c2a:	e7ee      	b.n	8003c0a <__swhatbuf_r+0x1e>
 8003c2c:	2340      	movs	r3, #64	; 0x40
 8003c2e:	2000      	movs	r0, #0
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	b016      	add	sp, #88	; 0x58
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c38 <__smakebuf_r>:
 8003c38:	898b      	ldrh	r3, [r1, #12]
 8003c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c3c:	079d      	lsls	r5, r3, #30
 8003c3e:	4606      	mov	r6, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	d507      	bpl.n	8003c54 <__smakebuf_r+0x1c>
 8003c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6163      	str	r3, [r4, #20]
 8003c50:	b002      	add	sp, #8
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	ab01      	add	r3, sp, #4
 8003c56:	466a      	mov	r2, sp
 8003c58:	f7ff ffc8 	bl	8003bec <__swhatbuf_r>
 8003c5c:	9900      	ldr	r1, [sp, #0]
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff fa57 	bl	8003114 <_malloc_r>
 8003c66:	b948      	cbnz	r0, 8003c7c <__smakebuf_r+0x44>
 8003c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6c:	059a      	lsls	r2, r3, #22
 8003c6e:	d4ef      	bmi.n	8003c50 <__smakebuf_r+0x18>
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	e7e3      	b.n	8003c44 <__smakebuf_r+0xc>
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <__smakebuf_r+0x7c>)
 8003c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	6020      	str	r0, [r4, #0]
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	9b00      	ldr	r3, [sp, #0]
 8003c8c:	6163      	str	r3, [r4, #20]
 8003c8e:	9b01      	ldr	r3, [sp, #4]
 8003c90:	6120      	str	r0, [r4, #16]
 8003c92:	b15b      	cbz	r3, 8003cac <__smakebuf_r+0x74>
 8003c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 f889 	bl	8003db0 <_isatty_r>
 8003c9e:	b128      	cbz	r0, 8003cac <__smakebuf_r+0x74>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	89a0      	ldrh	r0, [r4, #12]
 8003cae:	4305      	orrs	r5, r0
 8003cb0:	81a5      	strh	r5, [r4, #12]
 8003cb2:	e7cd      	b.n	8003c50 <__smakebuf_r+0x18>
 8003cb4:	08002f2d 	.word	0x08002f2d

08003cb8 <__malloc_lock>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <__malloc_lock+0x8>)
 8003cba:	f7ff ba09 	b.w	80030d0 <__retarget_lock_acquire_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	20000774 	.word	0x20000774

08003cc4 <__malloc_unlock>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <__malloc_unlock+0x8>)
 8003cc6:	f7ff ba04 	b.w	80030d2 <__retarget_lock_release_recursive>
 8003cca:	bf00      	nop
 8003ccc:	20000774 	.word	0x20000774

08003cd0 <_free_r>:
 8003cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cd2:	2900      	cmp	r1, #0
 8003cd4:	d044      	beq.n	8003d60 <_free_r+0x90>
 8003cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cda:	9001      	str	r0, [sp, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f1a1 0404 	sub.w	r4, r1, #4
 8003ce2:	bfb8      	it	lt
 8003ce4:	18e4      	addlt	r4, r4, r3
 8003ce6:	f7ff ffe7 	bl	8003cb8 <__malloc_lock>
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <_free_r+0x94>)
 8003cec:	9801      	ldr	r0, [sp, #4]
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	b933      	cbnz	r3, 8003d00 <_free_r+0x30>
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	6014      	str	r4, [r2, #0]
 8003cf6:	b003      	add	sp, #12
 8003cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cfc:	f7ff bfe2 	b.w	8003cc4 <__malloc_unlock>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d908      	bls.n	8003d16 <_free_r+0x46>
 8003d04:	6825      	ldr	r5, [r4, #0]
 8003d06:	1961      	adds	r1, r4, r5
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	bf01      	itttt	eq
 8003d0c:	6819      	ldreq	r1, [r3, #0]
 8003d0e:	685b      	ldreq	r3, [r3, #4]
 8003d10:	1949      	addeq	r1, r1, r5
 8003d12:	6021      	streq	r1, [r4, #0]
 8003d14:	e7ed      	b.n	8003cf2 <_free_r+0x22>
 8003d16:	461a      	mov	r2, r3
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b10b      	cbz	r3, 8003d20 <_free_r+0x50>
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	d9fa      	bls.n	8003d16 <_free_r+0x46>
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	1855      	adds	r5, r2, r1
 8003d24:	42a5      	cmp	r5, r4
 8003d26:	d10b      	bne.n	8003d40 <_free_r+0x70>
 8003d28:	6824      	ldr	r4, [r4, #0]
 8003d2a:	4421      	add	r1, r4
 8003d2c:	1854      	adds	r4, r2, r1
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	d1e0      	bne.n	8003cf6 <_free_r+0x26>
 8003d34:	681c      	ldr	r4, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	6053      	str	r3, [r2, #4]
 8003d3a:	4421      	add	r1, r4
 8003d3c:	6011      	str	r1, [r2, #0]
 8003d3e:	e7da      	b.n	8003cf6 <_free_r+0x26>
 8003d40:	d902      	bls.n	8003d48 <_free_r+0x78>
 8003d42:	230c      	movs	r3, #12
 8003d44:	6003      	str	r3, [r0, #0]
 8003d46:	e7d6      	b.n	8003cf6 <_free_r+0x26>
 8003d48:	6825      	ldr	r5, [r4, #0]
 8003d4a:	1961      	adds	r1, r4, r5
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	bf04      	itt	eq
 8003d50:	6819      	ldreq	r1, [r3, #0]
 8003d52:	685b      	ldreq	r3, [r3, #4]
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	bf04      	itt	eq
 8003d58:	1949      	addeq	r1, r1, r5
 8003d5a:	6021      	streq	r1, [r4, #0]
 8003d5c:	6054      	str	r4, [r2, #4]
 8003d5e:	e7ca      	b.n	8003cf6 <_free_r+0x26>
 8003d60:	b003      	add	sp, #12
 8003d62:	bd30      	pop	{r4, r5, pc}
 8003d64:	20000778 	.word	0x20000778

08003d68 <_read_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d07      	ldr	r5, [pc, #28]	; (8003d88 <_read_r+0x20>)
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	4608      	mov	r0, r1
 8003d70:	4611      	mov	r1, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	602a      	str	r2, [r5, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7fd f938 	bl	8000fec <_read>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_read_r+0x1e>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_read_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000780 	.word	0x20000780

08003d8c <_fstat_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d07      	ldr	r5, [pc, #28]	; (8003dac <_fstat_r+0x20>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	602b      	str	r3, [r5, #0]
 8003d9a:	f7fd f96c 	bl	8001076 <_fstat>
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	d102      	bne.n	8003da8 <_fstat_r+0x1c>
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	b103      	cbz	r3, 8003da8 <_fstat_r+0x1c>
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	bd38      	pop	{r3, r4, r5, pc}
 8003daa:	bf00      	nop
 8003dac:	20000780 	.word	0x20000780

08003db0 <_isatty_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d06      	ldr	r5, [pc, #24]	; (8003dcc <_isatty_r+0x1c>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	f7fd f96b 	bl	8001096 <_isatty>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_isatty_r+0x1a>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_isatty_r+0x1a>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	20000780 	.word	0x20000780

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
